#!/usr/bin/env python3
#
# stdin: JSON formatted database containing observed data while running fingerprint tests
# stdout: XML data to be fed to the neddoc generator to augment static INET NED documentation

import sys
import json
import re

def tildeize(t):
    p = re.compile(r'\b(inet::([a-z0-9]+::)*)')
    t = p.sub(r'~\1', t)
    p = re.compile(r'\b(inet\.([a-z0-9]+\.)*)')
    t = p.sub(r'~\1', t)
    return t

# format a single table for a given action into a string
def table(rows, title):
    if rows == None:
        return ''

    s = '<h3 class="mdl-color-text--primary subtitle">{} (observed)</h3>\n'.format(title)
    s += '<table class="behaviortable">\n'
    s += '<tr style="text-transform: capitalize">'
    for k in rows[0].keys():
        s += '<th>{}</th>'.format(k)
    s += '</tr>\n'
    for entry in sorted(rows, key = lambda x:list(x.values())):
        s +='<tr>'
        for k, v in entry.items():
            if type(v) is list:
                s +='<td>'
                sep = ''
                for vv in v:
                    if k == 'function':
                        s += sep + '{}'.format(vv)
                    else:
                        s += sep + '{}'.format(tildeize(vv))
                    sep = ', '
                s +='</td>'
            else:
                if k == 'function':
                    s +='<td>{}</td>'.format(v)
                else:
                    s +='<td>{}</td>'.format(tildeize(v))
        s += '</tr>\n'
    s += '</table>\n'
    return s

def markOpt(t):
    return '{}?'.format(t)

# group the colName column of list of tuple
def groupCol(rows, colName):
    if rows == None:
        return None
    r = {}
    for entry in rows:
        e = entry.copy()
        e.pop(colName, None)
        g = set(entry[colName])
        ekey = json.dumps(e)
        if ekey in r:
            r[ekey][1] = r[ekey][1] & g
            r[ekey][2] = r[ekey][2] | g
        else:
            r[ekey] = [e,g,g]

    rr = list()
    for k,e in r.items():
        x = e[0]
        x[colName] = sorted(list(e[1]))
        opt = sorted(list(e[2]-e[1]))
        x[colName].extend(list(map(markOpt, opt)))
        rr.append(x)
    return rr

# aggregate to a list the colName column
def aggregateCol(rows, colName):
    if rows == None:
        return None
    r = {}
    for entry in rows:
        e = entry.copy()
        e.pop(colName, None)
        g = { entry[colName] }
        ekey = json.dumps(e)
        if ekey in r:
            r[ekey][1] = r[ekey][1] | g
        else:
            r[ekey] = [e,g]

    rr = list()
    for k,e in r.items():
        x = e[0]
        x[colName] = sorted(list(e[1]))
        rr.append(x)
    return rr

db = json.load(sys.stdin)

print('<docfragments>')
for nedtype, actions in db['ned'].items():
    print('<docfragment nedtype="{}" anchor="after-statistics"><![CDATA[\n{}]]></docfragment>\n\n'.format(
        nedtype,
        table(actions.get('SCHEDULE'), 'Scheduled messages') +
        table(actions.get('CALL'), 'Direct method calls') +
        table(aggregateCol(actions.get('CALLED'), 'call from'), 'Called methods') +
        table(groupCol(actions.get('INPUT'), 'tags'), 'Incoming messages') +
        table(groupCol(actions.get('OUTPUT'), 'tags'), 'Outgoing messages') +
        table(groupCol(actions.get('PULL_IN'), 'tags'), 'Pull in messages') +
        table(groupCol(actions.get('PULLED_OUT'), 'tags'), 'Pulled out messages') +
        table(groupCol(actions.get('PUSHED_IN'), 'tags'), 'Pushed in messages') +
        table(groupCol(actions.get('PUSH_OUT'), 'tags'), 'Push out messages') +
        table(aggregateCol(actions.get('PACKET'), 'packetAction'), 'Packet operations') +
        table(aggregateCol(actions.get('STAG'), 'tagAction'), 'Shared Tagging operations') +
        table(aggregateCol(actions.get('RTAG'), 'tagAction'), 'Region Tagging operations') +
        table(aggregateCol(actions.get('TAG'), 'tagAction'), 'Tagging operations') +
        '')
    )

    # TODO add table for TAGs: modules, who uses the actual TAG
    # TODO CHUNK_USAGE, STAG_USAGE, RTAG_USAGE, TAG_USAGE
for msgtype, actions in db['msg'].items():
    print('<docfragment msgtype="{}" anchor="after-properties"><![CDATA[\n{}]]></docfragment>\n\n'.format(
        msgtype,
        table(aggregateCol(actions.get('CHUNK_USAGE'), 'module'), 'Packet operations') +
        table(aggregateCol(actions.get('STAG_USAGE'), 'module'), 'Shared Tagging operations') +
        table(aggregateCol(actions.get('RTAG_USAGE'), 'module'), 'Region Tagging operations') +
        table(aggregateCol(actions.get('TAG_USAGE'), 'module'), 'Tagging operations') +
        '')
    )

print('</docfragments>')
