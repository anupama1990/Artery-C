//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/transportlayer/rtp/profiles/avprofile/RtpMpegPacket.msg.
//

#ifndef __INET__RTP_RTPMPEGPACKET_M_H
#define __INET__RTP_RTPMPEGPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {
namespace rtp {

class RtpMpegHeader;

}  // namespace rtp
}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {
namespace rtp {

/**
 * Class generated from <tt>inet/transportlayer/rtp/profiles/avprofile/RtpMpegPacket.msg:28</tt> by opp_msgtool.
 * <pre>
 * class RtpMpegHeader extends FieldsChunk
 * {
 *     chunkLength = B(4);
 *     int headerLength = 4;
 *     int payloadLength; // size of the mpeg data
 *     uint8_t mbz = 0; // Unused. Must be set to zero in current specification.
 *     bool two = false; // Set to 1 when the MPEG-2 video-specific header extension follows this header.
 *     uint16_t temporalReference = 0; // The temporal reference of the current picture within the current GOP.
 *     bool activeN = false; // Set to 1 when the following bit (N) is used to signal changes in the picture header information for MPEG-2 payloads.
 *     bool newPictureHeader = false; // Used for MPEG-2 payloads when the previous bit (AN) is set to 1. Otherwise, it must be set to zero.
 *     bool sequenceHeaderPresent = false; // Normally 0 and set to 1 at the occurrence of each MPEG sequence header.
 *     bool beginningOfSlice = false; // Set when the start of the packet payload is a slice start code, or when a slice start
 *                                    // code is preceded only by one or more of a Video_Sequence_Header, GOP_header and/or Picture_Header.
 *     bool endOfSlice = false; // Set when the last byte of the payload is the end of an MPEG slice.
 *     uint8_t pictureType; // picture type of the frame the data in this packet belongs to.
 *     bool fbv = false; // full_pel_backward_vector
 *     uint8_t bfc = 0; // backward_f_code
 *     bool ffv = false; // full_pel_forward_vector
 *     uint8_t ffc = 0; // forward_f_code
 * 
 *     // currenrtly unused fields:
 *     //int mzb;
 *     //int two;
 *     //int temporalReference;
 *     //int activeN;
 *     //int newPictureHeader;
 *     //int sequenceHeaderPresent;
 *     //int beginningOfSlice;
 *     //int endOfSlice;
 *     //int fbv;
 *     //int bfc;
 *     //int ffv;
 *     //int ffc;
 * }
 * </pre>
 */
class INET_API RtpMpegHeader : public ::inet::FieldsChunk
{
  protected:
    int headerLength = 4;
    int payloadLength = 0;
    uint8_t mbz = 0;
    bool two = false;
    uint16_t temporalReference = 0;
    bool activeN = false;
    bool newPictureHeader = false;
    bool sequenceHeaderPresent = false;
    bool beginningOfSlice = false;
    bool endOfSlice = false;
    uint8_t pictureType = 0;
    bool fbv = false;
    uint8_t bfc = 0;
    bool ffv = false;
    uint8_t ffc = 0;

  private:
    void copy(const RtpMpegHeader& other);

  protected:
    bool operator==(const RtpMpegHeader&) = delete;

  public:
    RtpMpegHeader();
    RtpMpegHeader(const RtpMpegHeader& other);
    virtual ~RtpMpegHeader();
    RtpMpegHeader& operator=(const RtpMpegHeader& other);
    virtual RtpMpegHeader *dup() const override {return new RtpMpegHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getHeaderLength() const;
    virtual void setHeaderLength(int headerLength);

    virtual int getPayloadLength() const;
    virtual void setPayloadLength(int payloadLength);

    virtual uint8_t getMbz() const;
    virtual void setMbz(uint8_t mbz);

    virtual bool getTwo() const;
    virtual void setTwo(bool two);

    virtual uint16_t getTemporalReference() const;
    virtual void setTemporalReference(uint16_t temporalReference);

    virtual bool getActiveN() const;
    virtual void setActiveN(bool activeN);

    virtual bool getNewPictureHeader() const;
    virtual void setNewPictureHeader(bool newPictureHeader);

    virtual bool getSequenceHeaderPresent() const;
    virtual void setSequenceHeaderPresent(bool sequenceHeaderPresent);

    virtual bool getBeginningOfSlice() const;
    virtual void setBeginningOfSlice(bool beginningOfSlice);

    virtual bool getEndOfSlice() const;
    virtual void setEndOfSlice(bool endOfSlice);

    virtual uint8_t getPictureType() const;
    virtual void setPictureType(uint8_t pictureType);

    virtual bool getFbv() const;
    virtual void setFbv(bool fbv);

    virtual uint8_t getBfc() const;
    virtual void setBfc(uint8_t bfc);

    virtual bool getFfv() const;
    virtual void setFfv(bool ffv);

    virtual uint8_t getFfc() const;
    virtual void setFfc(uint8_t ffc);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RtpMpegHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RtpMpegHeader& obj) {obj.parsimUnpack(b);}


}  // namespace rtp
}  // namespace inet


namespace omnetpp {

template<> inline inet::rtp::RtpMpegHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::rtp::RtpMpegHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET__RTP_RTPMPEGPACKET_M_H

