//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/transportlayer/common/L4PortTag.msg.
//

#ifndef __INET_L4PORTTAG_M_H
#define __INET_L4PORTTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class L4PortTagBase;
class L4PortReq;
class L4PortInd;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace inet {

/**
 * Class generated from <tt>inet/transportlayer/common/L4PortTag.msg:13</tt> by opp_msgtool.
 * <pre>
 * class L4PortTagBase extends TagBase
 * {
 *     int srcPort = -1;      // may be unspecified
 *     int destPort = -1;     // may be unspecified
 * }
 * </pre>
 */
class INET_API L4PortTagBase : public ::inet::TagBase
{
  protected:
    int srcPort = -1;
    int destPort = -1;

  private:
    void copy(const L4PortTagBase& other);

  protected:
    bool operator==(const L4PortTagBase&) = delete;

  public:
    L4PortTagBase();
    L4PortTagBase(const L4PortTagBase& other);
    virtual ~L4PortTagBase();
    L4PortTagBase& operator=(const L4PortTagBase& other);
    virtual L4PortTagBase *dup() const override {return new L4PortTagBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSrcPort() const;
    virtual void setSrcPort(int srcPort);

    virtual int getDestPort() const;
    virtual void setDestPort(int destPort);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L4PortTagBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L4PortTagBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/transportlayer/common/L4PortTag.msg:22</tt> by opp_msgtool.
 * <pre>
 * //
 * // Determines the source and destination L4 ports for an outgoing packet.
 * //
 * class L4PortReq extends L4PortTagBase
 * {
 * }
 * </pre>
 */
class INET_API L4PortReq : public ::inet::L4PortTagBase
{
  protected:

  private:
    void copy(const L4PortReq& other);

  protected:
    bool operator==(const L4PortReq&) = delete;

  public:
    L4PortReq();
    L4PortReq(const L4PortReq& other);
    virtual ~L4PortReq();
    L4PortReq& operator=(const L4PortReq& other);
    virtual L4PortReq *dup() const override {return new L4PortReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L4PortReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L4PortReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/transportlayer/common/L4PortTag.msg:29</tt> by opp_msgtool.
 * <pre>
 * //
 * // Specifies the source and destination L4 ports for an incoming packet.
 * //
 * class L4PortInd extends L4PortTagBase
 * {
 * }
 * </pre>
 */
class INET_API L4PortInd : public ::inet::L4PortTagBase
{
  protected:

  private:
    void copy(const L4PortInd& other);

  protected:
    bool operator==(const L4PortInd&) = delete;

  public:
    L4PortInd();
    L4PortInd(const L4PortInd& other);
    virtual ~L4PortInd();
    L4PortInd& operator=(const L4PortInd& other);
    virtual L4PortInd *dup() const override {return new L4PortInd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L4PortInd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L4PortInd& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::L4PortTagBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::L4PortTagBase*>(ptr.get<cObject>()); }
template<> inline inet::L4PortReq *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::L4PortReq*>(ptr.get<cObject>()); }
template<> inline inet::L4PortInd *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::L4PortInd*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_L4PORTTAG_M_H

