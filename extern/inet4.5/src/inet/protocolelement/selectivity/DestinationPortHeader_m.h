//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/protocolelement/selectivity/DestinationPortHeader.msg.
//

#ifndef __INET_DESTINATIONPORTHEADER_M_H
#define __INET_DESTINATIONPORTHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class DestinationPortHeader;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {

/**
 * Class generated from <tt>inet/protocolelement/selectivity/DestinationPortHeader.msg:14</tt> by opp_msgtool.
 * <pre>
 * class DestinationPortHeader extends FieldsChunk
 * {
 *     chunkLength = B(2);
 *     int destinationPort;
 * }
 * </pre>
 */
class INET_API DestinationPortHeader : public ::inet::FieldsChunk
{
  protected:
    int destinationPort = 0;

  private:
    void copy(const DestinationPortHeader& other);

  protected:
    bool operator==(const DestinationPortHeader&) = delete;

  public:
    DestinationPortHeader();
    DestinationPortHeader(const DestinationPortHeader& other);
    virtual ~DestinationPortHeader();
    DestinationPortHeader& operator=(const DestinationPortHeader& other);
    virtual DestinationPortHeader *dup() const override {return new DestinationPortHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getDestinationPort() const;
    virtual void setDestinationPort(int destinationPort);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DestinationPortHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DestinationPortHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::DestinationPortHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::DestinationPortHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_DESTINATIONPORTHEADER_M_H

