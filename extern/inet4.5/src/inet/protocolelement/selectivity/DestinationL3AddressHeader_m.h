//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/protocolelement/selectivity/DestinationL3AddressHeader.msg.
//

#ifndef __INET_DESTINATIONL3ADDRESSHEADER_M_H
#define __INET_DESTINATIONL3ADDRESSHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class DestinationL3AddressHeader;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address


namespace inet {

/**
 * Class generated from <tt>inet/protocolelement/selectivity/DestinationL3AddressHeader.msg:14</tt> by opp_msgtool.
 * <pre>
 * class DestinationL3AddressHeader extends FieldsChunk
 * {
 *     chunkLength = B(4);
 *     L3Address destinationAddress;
 * }
 * </pre>
 */
class INET_API DestinationL3AddressHeader : public ::inet::FieldsChunk
{
  protected:
    L3Address destinationAddress;

  private:
    void copy(const DestinationL3AddressHeader& other);

  protected:
    bool operator==(const DestinationL3AddressHeader&) = delete;

  public:
    DestinationL3AddressHeader();
    DestinationL3AddressHeader(const DestinationL3AddressHeader& other);
    virtual ~DestinationL3AddressHeader();
    DestinationL3AddressHeader& operator=(const DestinationL3AddressHeader& other);
    virtual DestinationL3AddressHeader *dup() const override {return new DestinationL3AddressHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const L3Address& getDestinationAddress() const;
    virtual L3Address& getDestinationAddressForUpdate() { handleChange();return const_cast<L3Address&>(const_cast<DestinationL3AddressHeader*>(this)->getDestinationAddress());}
    virtual void setDestinationAddress(const L3Address& destinationAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DestinationL3AddressHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DestinationL3AddressHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::DestinationL3AddressHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::DestinationL3AddressHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_DESTINATIONL3ADDRESSHEADER_M_H

