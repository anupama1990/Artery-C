//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/routing/rip/RipPacket.msg.
//

#ifndef __INET_RIPPACKET_M_H
#define __INET_RIPPACKET_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

struct RipEntry;
class RipPacket;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address


namespace inet {

// cplusplus {{
const B RIP_HEADER_SIZE = B(4);
const B RIP_RTE_SIZE = B(20);
// }}

/**
 * Enum generated from <tt>inet/routing/rip/RipPacket.msg:22</tt> by opp_msgtool.
 * <pre>
 * //
 * // RIP commands
 * //
 * enum RipCommand
 * {
 *     RIP_REQUEST = 1;
 *     RIP_RESPONSE = 2;
 * }
 * </pre>
 */
enum RipCommand {
    RIP_REQUEST = 1,
    RIP_RESPONSE = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RipCommand& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RipCommand& e) { int n; b->unpack(n); e = static_cast<RipCommand>(n); }

/**
 * Enum generated from <tt>inet/routing/rip/RipPacket.msg:30</tt> by opp_msgtool.
 * <pre>
 * //
 * // Address Family constants
 * //
 * enum RipAf
 * {
 *     RIP_AF_NONE = 0;
 *     RIP_AF_INET = 2;
 *     // RIP_AF_AUTH = 0xFFFF;
 * }
 * </pre>
 */
enum RipAf {
    RIP_AF_NONE = 0,
    RIP_AF_INET = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RipAf& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RipAf& e) { int n; b->unpack(n); e = static_cast<RipAf>(n); }

/**
 * Struct generated from inet/routing/rip/RipPacket.msg:42 by opp_msgtool.
 */
struct INET_API RipEntry
{
    RipEntry();
    RipAf addressFamilyId = static_cast<inet::RipAf>(-1);
    unsigned short routeTag = 0;
    L3Address address;
    int prefixLength = 0;
    L3Address nextHop;
    unsigned int metric = 0;
};

// helpers for local use
void INET_API __doPacking(omnetpp::cCommBuffer *b, const RipEntry& a);
void INET_API __doUnpacking(omnetpp::cCommBuffer *b, RipEntry& a);

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RipEntry& obj) { __doPacking(b, obj); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RipEntry& obj) { __doUnpacking(b, obj); }

/**
 * Class generated from <tt>inet/routing/rip/RipPacket.msg:58</tt> by opp_msgtool.
 * <pre>
 * //
 * // RIPv2 packet
 * //
 * // note: Authentication entry is not allowed
 * //
 * class RipPacket extends FieldsChunk
 * {
 *     RipCommand command;
 *     // version is fixed: 2
 *     RipEntry entry[];
 * }
 * </pre>
 */
class INET_API RipPacket : public ::inet::FieldsChunk
{
  protected:
    RipCommand command = static_cast<inet::RipCommand>(-1);
    RipEntry *entry = nullptr;
    size_t entry_arraysize = 0;

  private:
    void copy(const RipPacket& other);

  protected:
    bool operator==(const RipPacket&) = delete;

  public:
    RipPacket();
    RipPacket(const RipPacket& other);
    virtual ~RipPacket();
    RipPacket& operator=(const RipPacket& other);
    virtual RipPacket *dup() const override {return new RipPacket(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual RipCommand getCommand() const;
    virtual void setCommand(RipCommand command);

    virtual void setEntryArraySize(size_t size);
    virtual size_t getEntryArraySize() const;
    virtual const RipEntry& getEntry(size_t k) const;
    virtual RipEntry& getEntryForUpdate(size_t k) { handleChange();return const_cast<RipEntry&>(const_cast<RipPacket*>(this)->getEntry(k));}
    virtual void setEntry(size_t k, const RipEntry& entry);
    virtual void insertEntry(size_t k, const RipEntry& entry);
    [[deprecated]] void insertEntry(const RipEntry& entry) {appendEntry(entry);}
    virtual void appendEntry(const RipEntry& entry);
    virtual void eraseEntry(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RipPacket& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RipPacket& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::RipEntry *p) {return any_ptr(p);}
template<> inline inet::RipEntry *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::RipEntry>(); }
template<> inline inet::RipPacket *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::RipPacket*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_RIPPACKET_M_H

