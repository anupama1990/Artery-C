//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/routing/eigrp/EigrpTimer.msg.
//

#ifndef __EIGRPTIMER_M_H
#define __EIGRPTIMER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif

class EigrpTimer;
/**
 * Enum generated from <tt>inet/routing/eigrp/EigrpTimer.msg:14</tt> by opp_msgtool.
 * <pre>
 * // types of timers
 * enum EigrpTimerType
 * {
 *     EIGRP_HELLO_TIMER = 1;      // Hello timer
 *     EIGRP_HOLD_TIMER = 2;       // Hold timer
 * }
 * </pre>
 */
enum EigrpTimerType {
    EIGRP_HELLO_TIMER = 1,
    EIGRP_HOLD_TIMER = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EigrpTimerType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EigrpTimerType& e) { int n; b->unpack(n); e = static_cast<EigrpTimerType>(n); }

/**
 * Class generated from <tt>inet/routing/eigrp/EigrpTimer.msg:22</tt> by opp_msgtool.
 * <pre>
 * // general timer structure
 * message EigrpTimer
 * {
 *     char timerKind \@enum(EigrpTimerType);
 * }
 * </pre>
 */
class INET_API EigrpTimer : public ::omnetpp::cMessage
{
  protected:
    char timerKind = 0;

  private:
    void copy(const EigrpTimer& other);

  protected:
    bool operator==(const EigrpTimer&) = delete;

  public:
    EigrpTimer(const char *name=nullptr, short kind=0);
    EigrpTimer(const EigrpTimer& other);
    virtual ~EigrpTimer();
    EigrpTimer& operator=(const EigrpTimer& other);
    virtual EigrpTimer *dup() const override {return new EigrpTimer(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual char getTimerKind() const;
    virtual void setTimerKind(char timerKind);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EigrpTimer& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EigrpTimer& obj) {obj.parsimUnpack(b);}


namespace omnetpp {

template<> inline EigrpTimer *fromAnyPtr(any_ptr ptr) { return check_and_cast<EigrpTimer*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __EIGRPTIMER_M_H

