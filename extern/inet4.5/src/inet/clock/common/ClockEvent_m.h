//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/clock/common/ClockEvent.msg.
//

#ifndef __INET_CLOCKEVENT_M_H
#define __INET_CLOCKEVENT_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class ClockEvent;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/clock/contract/ClockTime_m.h" // import inet.clock.contract.ClockTime

#include "inet/clock/contract/IClock_m.h" // import inet.clock.contract.IClock


namespace inet {

/**
 * Enum generated from <tt>inet/clock/common/ClockEvent.msg:13</tt> by opp_msgtool.
 * <pre>
 * enum OverdueClockEventHandlingMode
 * {
 *     UNSPECIFIED = -1;
 *     EXECUTE = 0;
 *     SKIP = 1;
 *     ERROR = 2;
 * }
 * </pre>
 */
enum OverdueClockEventHandlingMode {
    UNSPECIFIED = -1,
    EXECUTE = 0,
    SKIP = 1,
    ERROR = 2
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const OverdueClockEventHandlingMode& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, OverdueClockEventHandlingMode& e) { int n; b->unpack(n); e = static_cast<OverdueClockEventHandlingMode>(n); }

/**
 * Class generated from <tt>inet/clock/common/ClockEvent.msg:21</tt> by opp_msgtool.
 * <pre>
 * message ClockEvent
 * {
 *     \@customize;
 *     IClock *clock;
 *     bool relative = false;
 *     clocktime_t arrivalClockTime = -1;
 *     OverdueClockEventHandlingMode overdueClockEventHandlingMode = UNSPECIFIED;
 * }
 * </pre>
 *
 * ClockEvent_Base is only useful if it gets subclassed, and ClockEvent is derived from it.
 * The minimum code to be written for ClockEvent is the following:
 *
 * <pre>
 * class INET_API ClockEvent : public ClockEvent_Base
 * {
 *   private:
 *     void copy(const ClockEvent& other) { ... }

 *   public:
 *     ClockEvent(const char *name=nullptr, short kind=0) : ClockEvent_Base(name,kind) {}
 *     ClockEvent(const ClockEvent& other) : ClockEvent_Base(other) {copy(other);}
 *     ClockEvent& operator=(const ClockEvent& other) {if (this==&other) return *this; ClockEvent_Base::operator=(other); copy(other); return *this;}
 *     virtual ClockEvent *dup() const override {return new ClockEvent(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from ClockEvent_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(ClockEvent)
 * </pre>
 */
class INET_API ClockEvent_Base : public ::omnetpp::cMessage
{
  protected:
    IClock * clock = nullptr;
    bool relative = false;
    clocktime_t arrivalClockTime = -1;
    OverdueClockEventHandlingMode overdueClockEventHandlingMode = UNSPECIFIED;

  private:
    void copy(const ClockEvent_Base& other);

  protected:
    bool operator==(const ClockEvent_Base&) = delete;
    // make constructors protected to avoid instantiation
    ClockEvent_Base(const char *name=nullptr, short kind=0);
    ClockEvent_Base(const ClockEvent_Base& other);
    // make assignment operator protected to force the user override it
    ClockEvent_Base& operator=(const ClockEvent_Base& other);

  public:
    virtual ~ClockEvent_Base();
    virtual ClockEvent_Base *dup() const override {throw omnetpp::cRuntimeError("You forgot to manually add a dup() function to class ClockEvent");}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const IClock * getClock() const;
    virtual IClock * getClockForUpdate() { return const_cast<IClock *>(const_cast<ClockEvent_Base*>(this)->getClock());}
    virtual void setClock(IClock * clock);

    virtual bool getRelative() const;
    virtual void setRelative(bool relative);

    virtual clocktime_t getArrivalClockTime() const;
    virtual void setArrivalClockTime(clocktime_t arrivalClockTime);

    virtual OverdueClockEventHandlingMode getOverdueClockEventHandlingMode() const;
    virtual void setOverdueClockEventHandlingMode(OverdueClockEventHandlingMode overdueClockEventHandlingMode);
};


}  // namespace inet


namespace omnetpp {

template<> inline inet::ClockEvent_Base *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::ClockEvent_Base*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_CLOCKEVENT_M_H

