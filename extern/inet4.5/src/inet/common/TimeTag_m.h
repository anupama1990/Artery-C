//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/common/TimeTag.msg.
//

#ifndef __INET_TIMETAG_M_H
#define __INET_TIMETAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class CreationTimeTag;
class ResidenceTimeTag;
class TimeTagBase;
class ElapsedTimeTag;
class DelayingTimeTag;
class QueueingTimeTag;
class ProcessingTimeTag;
class TransmissionTimeTag;
class PropagationTimeTag;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace inet {

/**
 * Class generated from <tt>inet/common/TimeTag.msg:17</tt> by opp_msgtool.
 * <pre>
 * //
 * // This tag specifies the creation time. It can be attached to a specific
 * // region of a packet in order to store the time when that region was created.
 * //
 * class CreationTimeTag extends TagBase
 * {
 *     simtime_t creationTime = simTime();
 * }
 * </pre>
 */
class INET_API CreationTimeTag : public ::inet::TagBase
{
  protected:
    ::omnetpp::simtime_t creationTime = simTime();

  private:
    void copy(const CreationTimeTag& other);

  protected:
    bool operator==(const CreationTimeTag&) = delete;

  public:
    CreationTimeTag();
    CreationTimeTag(const CreationTimeTag& other);
    virtual ~CreationTimeTag();
    CreationTimeTag& operator=(const CreationTimeTag& other);
    virtual CreationTimeTag *dup() const override {return new CreationTimeTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual ::omnetpp::simtime_t getCreationTime() const;
    virtual void setCreationTime(::omnetpp::simtime_t creationTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CreationTimeTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CreationTimeTag& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/common/TimeTag.msg:27</tt> by opp_msgtool.
 * <pre>
 * //
 * // This tag specifies the network node residence start and end times. It can be
 * // attached to a specific region of a packet in order to store when that region
 * // entered and left the network node.
 * //
 * class ResidenceTimeTag extends TagBase
 * {
 *     simtime_t startTime = -1;
 *     simtime_t endTime = -1;
 * }
 * </pre>
 */
class INET_API ResidenceTimeTag : public ::inet::TagBase
{
  protected:
    ::omnetpp::simtime_t startTime = -1;
    ::omnetpp::simtime_t endTime = -1;

  private:
    void copy(const ResidenceTimeTag& other);

  protected:
    bool operator==(const ResidenceTimeTag&) = delete;

  public:
    ResidenceTimeTag();
    ResidenceTimeTag(const ResidenceTimeTag& other);
    virtual ~ResidenceTimeTag();
    ResidenceTimeTag& operator=(const ResidenceTimeTag& other);
    virtual ResidenceTimeTag *dup() const override {return new ResidenceTimeTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual ::omnetpp::simtime_t getStartTime() const;
    virtual void setStartTime(::omnetpp::simtime_t startTime);

    virtual ::omnetpp::simtime_t getEndTime() const;
    virtual void setEndTime(::omnetpp::simtime_t endTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ResidenceTimeTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ResidenceTimeTag& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/common/TimeTag.msg:36</tt> by opp_msgtool.
 * <pre>
 * //
 * // This is a base class for various time measurement tags.
 * //
 * class TimeTagBase extends TagBase
 * {
 *     string flowNames[]; // flow names for which the times belong
 *     simtime_t bitTotalTimes[]; // total bit time summed up for the relevant modules
 *     simtime_t packetTotalTimes[]; // total packet time summed up for the relevant modules
 * }
 * </pre>
 */
class INET_API TimeTagBase : public ::inet::TagBase
{
  protected:
    ::omnetpp::opp_string *flowNames = nullptr;
    size_t flowNames_arraysize = 0;
    ::omnetpp::simtime_t *bitTotalTimes = nullptr;
    size_t bitTotalTimes_arraysize = 0;
    ::omnetpp::simtime_t *packetTotalTimes = nullptr;
    size_t packetTotalTimes_arraysize = 0;

  private:
    void copy(const TimeTagBase& other);

  protected:
    bool operator==(const TimeTagBase&) = delete;

  public:
    TimeTagBase();
    TimeTagBase(const TimeTagBase& other);
    virtual ~TimeTagBase();
    TimeTagBase& operator=(const TimeTagBase& other);
    virtual TimeTagBase *dup() const override {return new TimeTagBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setFlowNamesArraySize(size_t size);
    virtual size_t getFlowNamesArraySize() const;
    virtual const char * getFlowNames(size_t k) const;
    virtual void setFlowNames(size_t k, const char * flowNames);
    virtual void insertFlowNames(size_t k, const char * flowNames);
    [[deprecated]] void insertFlowNames(const char * flowNames) {appendFlowNames(flowNames);}
    virtual void appendFlowNames(const char * flowNames);
    virtual void eraseFlowNames(size_t k);

    virtual void setBitTotalTimesArraySize(size_t size);
    virtual size_t getBitTotalTimesArraySize() const;
    virtual ::omnetpp::simtime_t getBitTotalTimes(size_t k) const;
    virtual void setBitTotalTimes(size_t k, ::omnetpp::simtime_t bitTotalTimes);
    virtual void insertBitTotalTimes(size_t k, ::omnetpp::simtime_t bitTotalTimes);
    [[deprecated]] void insertBitTotalTimes(::omnetpp::simtime_t bitTotalTimes) {appendBitTotalTimes(bitTotalTimes);}
    virtual void appendBitTotalTimes(::omnetpp::simtime_t bitTotalTimes);
    virtual void eraseBitTotalTimes(size_t k);

    virtual void setPacketTotalTimesArraySize(size_t size);
    virtual size_t getPacketTotalTimesArraySize() const;
    virtual ::omnetpp::simtime_t getPacketTotalTimes(size_t k) const;
    virtual void setPacketTotalTimes(size_t k, ::omnetpp::simtime_t packetTotalTimes);
    virtual void insertPacketTotalTimes(size_t k, ::omnetpp::simtime_t packetTotalTimes);
    [[deprecated]] void insertPacketTotalTimes(::omnetpp::simtime_t packetTotalTimes) {appendPacketTotalTimes(packetTotalTimes);}
    virtual void appendPacketTotalTimes(::omnetpp::simtime_t packetTotalTimes);
    virtual void erasePacketTotalTimes(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TimeTagBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TimeTagBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/common/TimeTag.msg:47</tt> by opp_msgtool.
 * <pre>
 * //
 * // This tag specifies the elapsed time. It can be attached to a specific
 * // region of a packet in order to measure the elapsed time.
 * //
 * class ElapsedTimeTag extends TimeTagBase
 * {
 * }
 * </pre>
 */
class INET_API ElapsedTimeTag : public ::inet::TimeTagBase
{
  protected:

  private:
    void copy(const ElapsedTimeTag& other);

  protected:
    bool operator==(const ElapsedTimeTag&) = delete;

  public:
    ElapsedTimeTag();
    ElapsedTimeTag(const ElapsedTimeTag& other);
    virtual ~ElapsedTimeTag();
    ElapsedTimeTag& operator=(const ElapsedTimeTag& other);
    virtual ElapsedTimeTag *dup() const override {return new ElapsedTimeTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ElapsedTimeTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ElapsedTimeTag& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/common/TimeTag.msg:56</tt> by opp_msgtool.
 * <pre>
 * //
 * // This tag specifies the delaying time. It can be attached to a specific
 * // region of a packet in order to sum up the delaying time spent in each
 * // packet delayer module.
 * //
 * class DelayingTimeTag extends TimeTagBase
 * {
 * }
 * </pre>
 */
class INET_API DelayingTimeTag : public ::inet::TimeTagBase
{
  protected:

  private:
    void copy(const DelayingTimeTag& other);

  protected:
    bool operator==(const DelayingTimeTag&) = delete;

  public:
    DelayingTimeTag();
    DelayingTimeTag(const DelayingTimeTag& other);
    virtual ~DelayingTimeTag();
    DelayingTimeTag& operator=(const DelayingTimeTag& other);
    virtual DelayingTimeTag *dup() const override {return new DelayingTimeTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DelayingTimeTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DelayingTimeTag& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/common/TimeTag.msg:65</tt> by opp_msgtool.
 * <pre>
 * //
 * // This tag specifies the queueing time. It can be attached to a specific
 * // region of a packet in order to sum up the queueing time spent in each
 * // queueing module.
 * //
 * class QueueingTimeTag extends TimeTagBase
 * {
 * }
 * </pre>
 */
class INET_API QueueingTimeTag : public ::inet::TimeTagBase
{
  protected:

  private:
    void copy(const QueueingTimeTag& other);

  protected:
    bool operator==(const QueueingTimeTag&) = delete;

  public:
    QueueingTimeTag();
    QueueingTimeTag(const QueueingTimeTag& other);
    virtual ~QueueingTimeTag();
    QueueingTimeTag& operator=(const QueueingTimeTag& other);
    virtual QueueingTimeTag *dup() const override {return new QueueingTimeTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const QueueingTimeTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, QueueingTimeTag& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/common/TimeTag.msg:74</tt> by opp_msgtool.
 * <pre>
 * //
 * // This tag specifies the processing time. It can be attached to a specific
 * // region of a packet in order to sum up the processing time spent in each
 * // packet processor module.
 * //
 * class ProcessingTimeTag extends TimeTagBase
 * {
 * }
 * </pre>
 */
class INET_API ProcessingTimeTag : public ::inet::TimeTagBase
{
  protected:

  private:
    void copy(const ProcessingTimeTag& other);

  protected:
    bool operator==(const ProcessingTimeTag&) = delete;

  public:
    ProcessingTimeTag();
    ProcessingTimeTag(const ProcessingTimeTag& other);
    virtual ~ProcessingTimeTag();
    ProcessingTimeTag& operator=(const ProcessingTimeTag& other);
    virtual ProcessingTimeTag *dup() const override {return new ProcessingTimeTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const ProcessingTimeTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, ProcessingTimeTag& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/common/TimeTag.msg:83</tt> by opp_msgtool.
 * <pre>
 * //
 * // This tag specifies the transmission time. It can be attached to a specific
 * // region of a packet in order to sum up the transmission time spent in each
 * // transmitter.
 * //
 * class TransmissionTimeTag extends TimeTagBase
 * {
 * }
 * </pre>
 */
class INET_API TransmissionTimeTag : public ::inet::TimeTagBase
{
  protected:

  private:
    void copy(const TransmissionTimeTag& other);

  protected:
    bool operator==(const TransmissionTimeTag&) = delete;

  public:
    TransmissionTimeTag();
    TransmissionTimeTag(const TransmissionTimeTag& other);
    virtual ~TransmissionTimeTag();
    TransmissionTimeTag& operator=(const TransmissionTimeTag& other);
    virtual TransmissionTimeTag *dup() const override {return new TransmissionTimeTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const TransmissionTimeTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, TransmissionTimeTag& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/common/TimeTag.msg:92</tt> by opp_msgtool.
 * <pre>
 * //
 * // This tag specifies the propagation time. It can be attached to a specific
 * // region of a packet in order to sum up the propagation time spent in each
 * // transmission channel.
 * //
 * class PropagationTimeTag extends TimeTagBase
 * {
 * }
 * </pre>
 */
class INET_API PropagationTimeTag : public ::inet::TimeTagBase
{
  protected:

  private:
    void copy(const PropagationTimeTag& other);

  protected:
    bool operator==(const PropagationTimeTag&) = delete;

  public:
    PropagationTimeTag();
    PropagationTimeTag(const PropagationTimeTag& other);
    virtual ~PropagationTimeTag();
    PropagationTimeTag& operator=(const PropagationTimeTag& other);
    virtual PropagationTimeTag *dup() const override {return new PropagationTimeTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PropagationTimeTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PropagationTimeTag& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::CreationTimeTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::CreationTimeTag*>(ptr.get<cObject>()); }
template<> inline inet::ResidenceTimeTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::ResidenceTimeTag*>(ptr.get<cObject>()); }
template<> inline inet::TimeTagBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::TimeTagBase*>(ptr.get<cObject>()); }
template<> inline inet::ElapsedTimeTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::ElapsedTimeTag*>(ptr.get<cObject>()); }
template<> inline inet::DelayingTimeTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::DelayingTimeTag*>(ptr.get<cObject>()); }
template<> inline inet::QueueingTimeTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::QueueingTimeTag*>(ptr.get<cObject>()); }
template<> inline inet::ProcessingTimeTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::ProcessingTimeTag*>(ptr.get<cObject>()); }
template<> inline inet::TransmissionTimeTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::TransmissionTimeTag*>(ptr.get<cObject>()); }
template<> inline inet::PropagationTimeTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::PropagationTimeTag*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_TIMETAG_M_H

