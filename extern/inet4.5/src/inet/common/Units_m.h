//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/common/Units.msg.
//

#ifndef __INET_UNITS_M_H
#define __INET_UNITS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {


}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

// cplusplus {{
#include "inet/common/Units.h"
// }}


namespace inet {

// cplusplus {{
using namespace units::values;
// }}


}  // namespace inet


namespace omnetpp {

inline any_ptr toAnyPtr(const inet::b *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::b *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::b>(); }
inline any_ptr toAnyPtr(const inet::B *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::B *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::B>(); }
inline any_ptr toAnyPtr(const inet::bps *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::bps *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::bps>(); }
inline any_ptr toAnyPtr(const inet::Hz *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::Hz *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::Hz>(); }
inline any_ptr toAnyPtr(const inet::m *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::m *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::m>(); }
inline any_ptr toAnyPtr(const inet::Ohmm *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::Ohmm *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::Ohmm>(); }
inline any_ptr toAnyPtr(const inet::rad *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::rad *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::rad>(); }
inline any_ptr toAnyPtr(const inet::W *p) {if (auto obj = as_cObject(p)) return any_ptr(obj); else return any_ptr(p);}
template<> inline inet::W *fromAnyPtr(any_ptr ptr) { return ptr.get<inet::W>(); }

}  // namespace omnetpp

#endif // ifndef __INET_UNITS_M_H

