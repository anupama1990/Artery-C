//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/common/FlowTag.msg.
//

#ifndef __INET_FLOWTAG_M_H
#define __INET_FLOWTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class FlowTag;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace inet {

/**
 * Class generated from <tt>inet/common/FlowTag.msg:13</tt> by opp_msgtool.
 * <pre>
 * class FlowTag extends TagBase
 * {
 *     string names[];
 * }
 * </pre>
 */
class INET_API FlowTag : public ::inet::TagBase
{
  protected:
    ::omnetpp::opp_string *names = nullptr;
    size_t names_arraysize = 0;

  private:
    void copy(const FlowTag& other);

  protected:
    bool operator==(const FlowTag&) = delete;

  public:
    FlowTag();
    FlowTag(const FlowTag& other);
    virtual ~FlowTag();
    FlowTag& operator=(const FlowTag& other);
    virtual FlowTag *dup() const override {return new FlowTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual void setNamesArraySize(size_t size);
    virtual size_t getNamesArraySize() const;
    virtual const char * getNames(size_t k) const;
    virtual void setNames(size_t k, const char * names);
    virtual void insertNames(size_t k, const char * names);
    [[deprecated]] void insertNames(const char * names) {appendNames(names);}
    virtual void appendNames(const char * names);
    virtual void eraseNames(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const FlowTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, FlowTag& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::FlowTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::FlowTag*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_FLOWTAG_M_H

