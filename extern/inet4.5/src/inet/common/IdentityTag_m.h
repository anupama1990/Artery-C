//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/common/IdentityTag.msg.
//

#ifndef __INET_IDENTITYTAG_M_H
#define __INET_IDENTITYTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class IdentityTag;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase

#include "inet/common/Units_m.h" // import inet.common.Units


namespace inet {

/**
 * Class generated from <tt>inet/common/IdentityTag.msg:25</tt> by opp_msgtool.
 * <pre>
 * //
 * // This tag provides a bit level identity for binary data. It must attached to
 * // a packet or chunk as a region tag. The identity of a bit in the region can be
 * // calculated by adding the offset of said bit to the identityStart field of the
 * // tag.
 * //
 * // The tag is split and merged automatically when the data is split or merged.
 * // This allows one to have an effective globally unique identity for each bit
 * // in the simulation. This tag allows following the bits in the network through
 * // the whole lifetime of the simulation.
 * //
 * class IdentityTag extends TagBase
 * {
 *     uint64_t identityStart = -1;
 * }
 * </pre>
 */
class INET_API IdentityTag : public ::inet::TagBase
{
  protected:
    uint64_t identityStart = -1;

  private:
    void copy(const IdentityTag& other);

  protected:
    bool operator==(const IdentityTag&) = delete;

  public:
    IdentityTag();
    IdentityTag(const IdentityTag& other);
    virtual ~IdentityTag();
    IdentityTag& operator=(const IdentityTag& other);
    virtual IdentityTag *dup() const override {return new IdentityTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint64_t getIdentityStart() const;
    virtual void setIdentityStart(uint64_t identityStart);


  public:
    static uint64_t getNextIdentityStart(b length);

    virtual const Ptr<TagBase> changeRegion(b offsetDelta, b lengthDelta) const override {
        if (offsetDelta == b(0))
            return const_cast<IdentityTag *>(this)->shared_from_this();
        else {
            const auto& result = staticPtrCast<IdentityTag>(dupShared());
            result->identityStart += b(offsetDelta).get();
            return result;
        }
    }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IdentityTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IdentityTag& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::IdentityTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::IdentityTag*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_IDENTITYTAG_M_H

