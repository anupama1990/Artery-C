//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/common/SequenceNumberTag.msg.
//

#ifndef __INET_SEQUENCENUMBERTAG_M_H
#define __INET_SEQUENCENUMBERTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class SequenceNumberTagBase;
class SequenceNumberReq;
class SequenceNumberInd;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace inet {

/**
 * Class generated from <tt>inet/common/SequenceNumberTag.msg:16</tt> by opp_msgtool.
 * <pre>
 * //
 * // This is an abstract base class that should not be directly added as a tag.
 * //
 * class SequenceNumberTagBase extends TagBase
 * {
 *     int sequenceNumber = -1;
 * }
 * </pre>
 */
class INET_API SequenceNumberTagBase : public ::inet::TagBase
{
  protected:
    int sequenceNumber = -1;

  private:
    void copy(const SequenceNumberTagBase& other);

  protected:
    bool operator==(const SequenceNumberTagBase&) = delete;

  public:
    SequenceNumberTagBase();
    SequenceNumberTagBase(const SequenceNumberTagBase& other);
    virtual ~SequenceNumberTagBase();
    SequenceNumberTagBase& operator=(const SequenceNumberTagBase& other);
    virtual SequenceNumberTagBase *dup() const override {return new SequenceNumberTagBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SequenceNumberTagBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SequenceNumberTagBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/common/SequenceNumberTag.msg:25</tt> by opp_msgtool.
 * <pre>
 * //
 * // This request determines the sequence number that should be used to send the packet.
 * // It may be present on a packet from the application to the mac protocol.
 * //
 * class SequenceNumberReq extends SequenceNumberTagBase
 * {
 * }
 * </pre>
 */
class INET_API SequenceNumberReq : public ::inet::SequenceNumberTagBase
{
  protected:

  private:
    void copy(const SequenceNumberReq& other);

  protected:
    bool operator==(const SequenceNumberReq&) = delete;

  public:
    SequenceNumberReq();
    SequenceNumberReq(const SequenceNumberReq& other);
    virtual ~SequenceNumberReq();
    SequenceNumberReq& operator=(const SequenceNumberReq& other);
    virtual SequenceNumberReq *dup() const override {return new SequenceNumberReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SequenceNumberReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SequenceNumberReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/common/SequenceNumberTag.msg:33</tt> by opp_msgtool.
 * <pre>
 * //
 * // This indication specifies the sequence number that was used to receive the packet.
 * // It may be present on a packet from the mac protocol to the application.
 * //
 * class SequenceNumberInd extends SequenceNumberTagBase
 * {
 * }
 * </pre>
 */
class INET_API SequenceNumberInd : public ::inet::SequenceNumberTagBase
{
  protected:

  private:
    void copy(const SequenceNumberInd& other);

  protected:
    bool operator==(const SequenceNumberInd&) = delete;

  public:
    SequenceNumberInd();
    SequenceNumberInd(const SequenceNumberInd& other);
    virtual ~SequenceNumberInd();
    SequenceNumberInd& operator=(const SequenceNumberInd& other);
    virtual SequenceNumberInd *dup() const override {return new SequenceNumberInd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SequenceNumberInd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SequenceNumberInd& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::SequenceNumberTagBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::SequenceNumberTagBase*>(ptr.get<cObject>()); }
template<> inline inet::SequenceNumberReq *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::SequenceNumberReq*>(ptr.get<cObject>()); }
template<> inline inet::SequenceNumberInd *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::SequenceNumberInd*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_SEQUENCENUMBERTAG_M_H

