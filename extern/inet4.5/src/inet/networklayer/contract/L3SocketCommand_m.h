//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/networklayer/contract/L3SocketCommand.msg.
//

#ifndef __INET_L3SOCKETCOMMAND_M_H
#define __INET_L3SOCKETCOMMAND_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class L3SocketCommandBase;
class L3SocketBindCommand;
class L3SocketConnectCommand;
class L3SocketCloseCommand;
class L3SocketDestroyCommand;
class L3SocketClosedIndication;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Protocol_m.h" // import inet.common.Protocol

#include "inet/networklayer/common/L3Address_m.h" // import inet.networklayer.common.L3Address


namespace inet {

/**
 * Enum generated from <tt>inet/networklayer/contract/L3SocketCommand.msg:14</tt> by opp_msgtool.
 * <pre>
 * enum L3CommandCode
 * {
 *     L3_C_BIND = 1;
 *     L3_C_CONNECT = 2;
 *     L3_C_CLOSE = 3;
 *     L3_C_DESTROY = 4;
 * }
 * </pre>
 */
enum L3CommandCode {
    L3_C_BIND = 1,
    L3_C_CONNECT = 2,
    L3_C_CLOSE = 3,
    L3_C_DESTROY = 4
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L3CommandCode& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L3CommandCode& e) { int n; b->unpack(n); e = static_cast<L3CommandCode>(n); }

/**
 * Enum generated from <tt>inet/networklayer/contract/L3SocketCommand.msg:21</tt> by opp_msgtool.
 * <pre>
 * enum L3StatusInd
 * {
 *     L3_I_DATA = 0;
 *     L3_I_SOCKET_CLOSED = 1;
 * }
 * </pre>
 */
enum L3StatusInd {
    L3_I_DATA = 0,
    L3_I_SOCKET_CLOSED = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L3StatusInd& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L3StatusInd& e) { int n; b->unpack(n); e = static_cast<L3StatusInd>(n); }

/**
 * Class generated from <tt>inet/networklayer/contract/L3SocketCommand.msg:27</tt> by opp_msgtool.
 * <pre>
 * class L3SocketCommandBase extends cObject
 * {
 * }
 * </pre>
 */
class INET_API L3SocketCommandBase : public ::omnetpp::cObject
{
  protected:

  private:
    void copy(const L3SocketCommandBase& other);

  protected:
    bool operator==(const L3SocketCommandBase&) = delete;

  public:
    L3SocketCommandBase();
    L3SocketCommandBase(const L3SocketCommandBase& other);
    virtual ~L3SocketCommandBase();
    L3SocketCommandBase& operator=(const L3SocketCommandBase& other);
    virtual L3SocketCommandBase *dup() const override {return new L3SocketCommandBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L3SocketCommandBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L3SocketCommandBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/contract/L3SocketCommand.msg:31</tt> by opp_msgtool.
 * <pre>
 * class L3SocketBindCommand extends L3SocketCommandBase
 * {
 *     const Protocol *protocol;
 *     L3Address localAddress;
 * }
 * </pre>
 */
class INET_API L3SocketBindCommand : public ::inet::L3SocketCommandBase
{
  protected:
    const Protocol * protocol = nullptr;
    L3Address localAddress;

  private:
    void copy(const L3SocketBindCommand& other);

  protected:
    bool operator==(const L3SocketBindCommand&) = delete;

  public:
    L3SocketBindCommand();
    L3SocketBindCommand(const L3SocketBindCommand& other);
    virtual ~L3SocketBindCommand();
    L3SocketBindCommand& operator=(const L3SocketBindCommand& other);
    virtual L3SocketBindCommand *dup() const override {return new L3SocketBindCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const Protocol * getProtocol() const;
    virtual void setProtocol(const Protocol * protocol);

    virtual const L3Address& getLocalAddress() const;
    virtual L3Address& getLocalAddressForUpdate() { return const_cast<L3Address&>(const_cast<L3SocketBindCommand*>(this)->getLocalAddress());}
    virtual void setLocalAddress(const L3Address& localAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L3SocketBindCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L3SocketBindCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/contract/L3SocketCommand.msg:37</tt> by opp_msgtool.
 * <pre>
 * class L3SocketConnectCommand extends L3SocketCommandBase
 * {
 *     L3Address remoteAddress;
 * }
 * </pre>
 */
class INET_API L3SocketConnectCommand : public ::inet::L3SocketCommandBase
{
  protected:
    L3Address remoteAddress;

  private:
    void copy(const L3SocketConnectCommand& other);

  protected:
    bool operator==(const L3SocketConnectCommand&) = delete;

  public:
    L3SocketConnectCommand();
    L3SocketConnectCommand(const L3SocketConnectCommand& other);
    virtual ~L3SocketConnectCommand();
    L3SocketConnectCommand& operator=(const L3SocketConnectCommand& other);
    virtual L3SocketConnectCommand *dup() const override {return new L3SocketConnectCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const L3Address& getRemoteAddress() const;
    virtual L3Address& getRemoteAddressForUpdate() { return const_cast<L3Address&>(const_cast<L3SocketConnectCommand*>(this)->getRemoteAddress());}
    virtual void setRemoteAddress(const L3Address& remoteAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L3SocketConnectCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L3SocketConnectCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/contract/L3SocketCommand.msg:42</tt> by opp_msgtool.
 * <pre>
 * class L3SocketCloseCommand extends L3SocketCommandBase
 * {
 * }
 * </pre>
 */
class INET_API L3SocketCloseCommand : public ::inet::L3SocketCommandBase
{
  protected:

  private:
    void copy(const L3SocketCloseCommand& other);

  protected:
    bool operator==(const L3SocketCloseCommand&) = delete;

  public:
    L3SocketCloseCommand();
    L3SocketCloseCommand(const L3SocketCloseCommand& other);
    virtual ~L3SocketCloseCommand();
    L3SocketCloseCommand& operator=(const L3SocketCloseCommand& other);
    virtual L3SocketCloseCommand *dup() const override {return new L3SocketCloseCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L3SocketCloseCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L3SocketCloseCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/contract/L3SocketCommand.msg:46</tt> by opp_msgtool.
 * <pre>
 * class L3SocketDestroyCommand extends L3SocketCommandBase
 * {
 * }
 * </pre>
 */
class INET_API L3SocketDestroyCommand : public ::inet::L3SocketCommandBase
{
  protected:

  private:
    void copy(const L3SocketDestroyCommand& other);

  protected:
    bool operator==(const L3SocketDestroyCommand&) = delete;

  public:
    L3SocketDestroyCommand();
    L3SocketDestroyCommand(const L3SocketDestroyCommand& other);
    virtual ~L3SocketDestroyCommand();
    L3SocketDestroyCommand& operator=(const L3SocketDestroyCommand& other);
    virtual L3SocketDestroyCommand *dup() const override {return new L3SocketDestroyCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L3SocketDestroyCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L3SocketDestroyCommand& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/contract/L3SocketCommand.msg:50</tt> by opp_msgtool.
 * <pre>
 * class L3SocketClosedIndication extends L3SocketCommandBase
 * {
 * }
 * </pre>
 */
class INET_API L3SocketClosedIndication : public ::inet::L3SocketCommandBase
{
  protected:

  private:
    void copy(const L3SocketClosedIndication& other);

  protected:
    bool operator==(const L3SocketClosedIndication&) = delete;

  public:
    L3SocketClosedIndication();
    L3SocketClosedIndication(const L3SocketClosedIndication& other);
    virtual ~L3SocketClosedIndication();
    L3SocketClosedIndication& operator=(const L3SocketClosedIndication& other);
    virtual L3SocketClosedIndication *dup() const override {return new L3SocketClosedIndication(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const L3SocketClosedIndication& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, L3SocketClosedIndication& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::L3SocketCommandBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::L3SocketCommandBase*>(ptr.get<cObject>()); }
template<> inline inet::L3SocketBindCommand *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::L3SocketBindCommand*>(ptr.get<cObject>()); }
template<> inline inet::L3SocketConnectCommand *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::L3SocketConnectCommand*>(ptr.get<cObject>()); }
template<> inline inet::L3SocketCloseCommand *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::L3SocketCloseCommand*>(ptr.get<cObject>()); }
template<> inline inet::L3SocketDestroyCommand *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::L3SocketDestroyCommand*>(ptr.get<cObject>()); }
template<> inline inet::L3SocketClosedIndication *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::L3SocketClosedIndication*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_L3SOCKETCOMMAND_M_H

