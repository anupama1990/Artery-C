//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/networklayer/ipv6/Ipv6ExtensionHeaders.msg.
//

#ifndef __INET_IPV6EXTENSIONHEADERS_M_H
#define __INET_IPV6EXTENSIONHEADERS_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class Ipv6HopByHopOptionsHeader;
class Ipv6RoutingHeader;
class Ipv6FragmentHeader;
class Ipv6DestinationOptionsHeader;
class Ipv6AuthenticationHeader;
class Ipv6EncapsulatingSecurityPayloadHeader;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Units_m.h" // import inet.common.Units

#include "inet/common/TlvOptions_m.h" // import inet.common.TlvOptions

#include "inet/networklayer/common/IpProtocolId_m.h" // import inet.networklayer.common.IpProtocolId

#include "inet/networklayer/ipv6/Ipv6Header_m.h" // import inet.networklayer.ipv6.Ipv6Header

#include "inet/networklayer/contract/ipv6/Ipv6Address_m.h" // import inet.networklayer.contract.ipv6.Ipv6Address

// cplusplus {{
#include "inet/networklayer/ipv6/Ipv6Header.h"
// }}


namespace inet {

// cplusplus {{
const B IPv6_FRAGMENT_HEADER_LENGTH = B(8);
// }}

/**
 * Enum generated from <tt>inet/networklayer/ipv6/Ipv6ExtensionHeaders.msg:30</tt> by opp_msgtool.
 * <pre>
 * //
 * // Ipv6 TLV option types
 * //
 * enum Ipv6TlvOptionTypes
 * {
 *     IPv6TLVOPTION_NOP1 = 0;
 *     IPv6TLVOPTION_NOPN = 1;
 *     IPv6TLVOPTION_TLV_GPSR = 47;
 * }
 * </pre>
 */
enum Ipv6TlvOptionTypes {
    IPv6TLVOPTION_NOP1 = 0,
    IPv6TLVOPTION_NOPN = 1,
    IPv6TLVOPTION_TLV_GPSR = 47
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv6TlvOptionTypes& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv6TlvOptionTypes& e) { int n; b->unpack(n); e = static_cast<Ipv6TlvOptionTypes>(n); }

/**
 * Class generated from <tt>inet/networklayer/ipv6/Ipv6ExtensionHeaders.msg:42</tt> by opp_msgtool.
 * <pre>
 * //
 * // Hop-by-Hop Options Header.
 * // RFC 2460 Section 4.3
 * // Next Header Value: 0
 * //
 * class Ipv6HopByHopOptionsHeader extends Ipv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_HOP;
 *     // byteLength = utils::roundUp(2 + tlvOptions.getLength(), 8);
 *     TlvOptions tlvOptions;
 * }
 * </pre>
 */
class INET_API Ipv6HopByHopOptionsHeader : public ::inet::Ipv6ExtensionHeader
{
  protected:
    TlvOptions tlvOptions;

  private:
    void copy(const Ipv6HopByHopOptionsHeader& other);

  protected:
    bool operator==(const Ipv6HopByHopOptionsHeader&) = delete;

  public:
    Ipv6HopByHopOptionsHeader();
    Ipv6HopByHopOptionsHeader(const Ipv6HopByHopOptionsHeader& other);
    virtual ~Ipv6HopByHopOptionsHeader();
    Ipv6HopByHopOptionsHeader& operator=(const Ipv6HopByHopOptionsHeader& other);
    virtual Ipv6HopByHopOptionsHeader *dup() const override {return new Ipv6HopByHopOptionsHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const TlvOptions& getTlvOptions() const;
    virtual TlvOptions& getTlvOptionsForUpdate() { return const_cast<TlvOptions&>(const_cast<Ipv6HopByHopOptionsHeader*>(this)->getTlvOptions());}
    virtual void setTlvOptions(const TlvOptions& tlvOptions);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv6HopByHopOptionsHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv6HopByHopOptionsHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/ipv6/Ipv6ExtensionHeaders.msg:54</tt> by opp_msgtool.
 * <pre>
 * //
 * // Routing Header
 * // RFC 2460 Section 4.4
 * // Next Header Value: 43
 * //
 * class Ipv6RoutingHeader extends Ipv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_ROUTING;
 *     byteLength = B(8);
 *     //byteLength = 8+16*getAddressArraySize() when routingType == 0
 *     uint8_t routingType;
 *     uint8_t segmentsLeft;
 *     Ipv6Address address[];
 * }
 * </pre>
 */
class INET_API Ipv6RoutingHeader : public ::inet::Ipv6ExtensionHeader
{
  protected:
    uint8_t routingType = 0;
    uint8_t segmentsLeft = 0;
    Ipv6Address *address = nullptr;
    size_t address_arraysize = 0;

  private:
    void copy(const Ipv6RoutingHeader& other);

  protected:
    bool operator==(const Ipv6RoutingHeader&) = delete;

  public:
    Ipv6RoutingHeader();
    Ipv6RoutingHeader(const Ipv6RoutingHeader& other);
    virtual ~Ipv6RoutingHeader();
    Ipv6RoutingHeader& operator=(const Ipv6RoutingHeader& other);
    virtual Ipv6RoutingHeader *dup() const override {return new Ipv6RoutingHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getRoutingType() const;
    virtual void setRoutingType(uint8_t routingType);

    virtual uint8_t getSegmentsLeft() const;
    virtual void setSegmentsLeft(uint8_t segmentsLeft);

    virtual void setAddressArraySize(size_t size);
    virtual size_t getAddressArraySize() const;
    virtual const Ipv6Address& getAddress(size_t k) const;
    virtual Ipv6Address& getAddressForUpdate(size_t k) { return const_cast<Ipv6Address&>(const_cast<Ipv6RoutingHeader*>(this)->getAddress(k));}
    virtual void setAddress(size_t k, const Ipv6Address& address);
    virtual void insertAddress(size_t k, const Ipv6Address& address);
    [[deprecated]] void insertAddress(const Ipv6Address& address) {appendAddress(address);}
    virtual void appendAddress(const Ipv6Address& address);
    virtual void eraseAddress(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv6RoutingHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv6RoutingHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/ipv6/Ipv6ExtensionHeaders.msg:69</tt> by opp_msgtool.
 * <pre>
 * //
 * // Fragment Header
 * // RFC 2460 Section 4.5
 * // Next Header Value: 44
 * //
 * class Ipv6FragmentHeader extends Ipv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_FRAGMENT;
 *     byteLength = IPv6_FRAGMENT_HEADER_LENGTH;
 *     uint16_t fragmentOffset;    // \@bit(13), divided by 8
 *     uint8_t reserved = 0;    // \@bit(2)
 *     bool moreFragments; //Is this the last fragment?
 *     uint32_t identification;  // datagram ID: identifies which datagram this fragment belongs to.
 * }
 * </pre>
 */
class INET_API Ipv6FragmentHeader : public ::inet::Ipv6ExtensionHeader
{
  protected:
    uint16_t fragmentOffset = 0;
    uint8_t reserved = 0;
    bool moreFragments = false;
    uint32_t identification = 0;

  private:
    void copy(const Ipv6FragmentHeader& other);

  protected:
    bool operator==(const Ipv6FragmentHeader&) = delete;

  public:
    Ipv6FragmentHeader();
    Ipv6FragmentHeader(const Ipv6FragmentHeader& other);
    virtual ~Ipv6FragmentHeader();
    Ipv6FragmentHeader& operator=(const Ipv6FragmentHeader& other);
    virtual Ipv6FragmentHeader *dup() const override {return new Ipv6FragmentHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getFragmentOffset() const;
    virtual void setFragmentOffset(uint16_t fragmentOffset);

    virtual uint8_t getReserved() const;
    virtual void setReserved(uint8_t reserved);

    virtual bool getMoreFragments() const;
    virtual void setMoreFragments(bool moreFragments);

    virtual uint32_t getIdentification() const;
    virtual void setIdentification(uint32_t identification);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv6FragmentHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv6FragmentHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/ipv6/Ipv6ExtensionHeaders.msg:84</tt> by opp_msgtool.
 * <pre>
 * //
 * // Destination Options Header
 * // RFC 2460 Section 4.6
 * // Next Header Value: 60
 * //
 * class Ipv6DestinationOptionsHeader extends Ipv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_DEST;
 *     byteLength = B(8);    // utils::roundUp(2 + tlvOptions.getLength(), 8);
 *     TlvOptions tlvOptions;
 * }
 * </pre>
 */
class INET_API Ipv6DestinationOptionsHeader : public ::inet::Ipv6ExtensionHeader
{
  protected:
    TlvOptions tlvOptions;

  private:
    void copy(const Ipv6DestinationOptionsHeader& other);

  protected:
    bool operator==(const Ipv6DestinationOptionsHeader&) = delete;

  public:
    Ipv6DestinationOptionsHeader();
    Ipv6DestinationOptionsHeader(const Ipv6DestinationOptionsHeader& other);
    virtual ~Ipv6DestinationOptionsHeader();
    Ipv6DestinationOptionsHeader& operator=(const Ipv6DestinationOptionsHeader& other);
    virtual Ipv6DestinationOptionsHeader *dup() const override {return new Ipv6DestinationOptionsHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const TlvOptions& getTlvOptions() const;
    virtual TlvOptions& getTlvOptionsForUpdate() { return const_cast<TlvOptions&>(const_cast<Ipv6DestinationOptionsHeader*>(this)->getTlvOptions());}
    virtual void setTlvOptions(const TlvOptions& tlvOptions);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv6DestinationOptionsHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv6DestinationOptionsHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/ipv6/Ipv6ExtensionHeaders.msg:96</tt> by opp_msgtool.
 * <pre>
 * //
 * // Authentication Header
 * // RFC 2402
 * // Not Implemented
 * //
 * class Ipv6AuthenticationHeader extends Ipv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_AUTH;
 *     byteLength = B(8); // FIXME verify
 * }
 * </pre>
 */
class INET_API Ipv6AuthenticationHeader : public ::inet::Ipv6ExtensionHeader
{
  protected:

  private:
    void copy(const Ipv6AuthenticationHeader& other);

  protected:
    bool operator==(const Ipv6AuthenticationHeader&) = delete;

  public:
    Ipv6AuthenticationHeader();
    Ipv6AuthenticationHeader(const Ipv6AuthenticationHeader& other);
    virtual ~Ipv6AuthenticationHeader();
    Ipv6AuthenticationHeader& operator=(const Ipv6AuthenticationHeader& other);
    virtual Ipv6AuthenticationHeader *dup() const override {return new Ipv6AuthenticationHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv6AuthenticationHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv6AuthenticationHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/ipv6/Ipv6ExtensionHeaders.msg:107</tt> by opp_msgtool.
 * <pre>
 * //
 * // Encapsulating Security Payload Header
 * // RFC 2406
 * // Not Implemented
 * //
 * class Ipv6EncapsulatingSecurityPayloadHeader extends Ipv6ExtensionHeader
 * {
 *     extensionType = IP_PROT_IPv6EXT_ESP;
 *     byteLength = B(8); // FIXME verify
 * }
 * </pre>
 */
class INET_API Ipv6EncapsulatingSecurityPayloadHeader : public ::inet::Ipv6ExtensionHeader
{
  protected:

  private:
    void copy(const Ipv6EncapsulatingSecurityPayloadHeader& other);

  protected:
    bool operator==(const Ipv6EncapsulatingSecurityPayloadHeader&) = delete;

  public:
    Ipv6EncapsulatingSecurityPayloadHeader();
    Ipv6EncapsulatingSecurityPayloadHeader(const Ipv6EncapsulatingSecurityPayloadHeader& other);
    virtual ~Ipv6EncapsulatingSecurityPayloadHeader();
    Ipv6EncapsulatingSecurityPayloadHeader& operator=(const Ipv6EncapsulatingSecurityPayloadHeader& other);
    virtual Ipv6EncapsulatingSecurityPayloadHeader *dup() const override {return new Ipv6EncapsulatingSecurityPayloadHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ipv6EncapsulatingSecurityPayloadHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ipv6EncapsulatingSecurityPayloadHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::Ipv6HopByHopOptionsHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ipv6HopByHopOptionsHeader*>(ptr.get<cObject>()); }
template<> inline inet::Ipv6RoutingHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ipv6RoutingHeader*>(ptr.get<cObject>()); }
template<> inline inet::Ipv6FragmentHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ipv6FragmentHeader*>(ptr.get<cObject>()); }
template<> inline inet::Ipv6DestinationOptionsHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ipv6DestinationOptionsHeader*>(ptr.get<cObject>()); }
template<> inline inet::Ipv6AuthenticationHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ipv6AuthenticationHeader*>(ptr.get<cObject>()); }
template<> inline inet::Ipv6EncapsulatingSecurityPayloadHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ipv6EncapsulatingSecurityPayloadHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_IPV6EXTENSIONHEADERS_M_H

