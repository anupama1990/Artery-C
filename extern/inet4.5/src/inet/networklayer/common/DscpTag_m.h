//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/networklayer/common/DscpTag.msg.
//

#ifndef __INET_DSCPTAG_M_H
#define __INET_DSCPTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class DscpTagBase;
class DscpReq;
class DscpInd;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace inet {

/**
 * Class generated from <tt>inet/networklayer/common/DscpTag.msg:16</tt> by opp_msgtool.
 * <pre>
 * //
 * // This is an abstract base class that should not be directly added as a tag.
 * //
 * class DscpTagBase extends TagBase
 * {
 *     int differentiatedServicesCodePoint = -1; // differentiated services code point
 * }
 * </pre>
 */
class INET_API DscpTagBase : public ::inet::TagBase
{
  protected:
    int differentiatedServicesCodePoint = -1;

  private:
    void copy(const DscpTagBase& other);

  protected:
    bool operator==(const DscpTagBase&) = delete;

  public:
    DscpTagBase();
    DscpTagBase(const DscpTagBase& other);
    virtual ~DscpTagBase();
    DscpTagBase& operator=(const DscpTagBase& other);
    virtual DscpTagBase *dup() const override {return new DscpTagBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getDifferentiatedServicesCodePoint() const;
    virtual void setDifferentiatedServicesCodePoint(int differentiatedServicesCodePoint);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DscpTagBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DscpTagBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/common/DscpTag.msg:25</tt> by opp_msgtool.
 * <pre>
 * //
 * // This request determines the differentiated services code point that should be used to transmit the packet.
 * // It may be present on a packet from the application to the network protocol.
 * //
 * class DscpReq extends DscpTagBase
 * {
 * }
 * </pre>
 */
class INET_API DscpReq : public ::inet::DscpTagBase
{
  protected:

  private:
    void copy(const DscpReq& other);

  protected:
    bool operator==(const DscpReq&) = delete;

  public:
    DscpReq();
    DscpReq(const DscpReq& other);
    virtual ~DscpReq();
    DscpReq& operator=(const DscpReq& other);
    virtual DscpReq *dup() const override {return new DscpReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DscpReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DscpReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/common/DscpTag.msg:33</tt> by opp_msgtool.
 * <pre>
 * //
 * // This indication specifies the differentiated services code point that was used to receive the packet.
 * // It may be present on a packet from the network protocol to the application.
 * //
 * class DscpInd extends DscpTagBase
 * {
 * }
 * </pre>
 */
class INET_API DscpInd : public ::inet::DscpTagBase
{
  protected:

  private:
    void copy(const DscpInd& other);

  protected:
    bool operator==(const DscpInd&) = delete;

  public:
    DscpInd();
    DscpInd(const DscpInd& other);
    virtual ~DscpInd();
    DscpInd& operator=(const DscpInd& other);
    virtual DscpInd *dup() const override {return new DscpInd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DscpInd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DscpInd& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::DscpTagBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::DscpTagBase*>(ptr.get<cObject>()); }
template<> inline inet::DscpReq *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::DscpReq*>(ptr.get<cObject>()); }
template<> inline inet::DscpInd *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::DscpInd*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_DSCPTAG_M_H

