//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/networklayer/common/EcnTag.msg.
//

#ifndef __INET_ECNTAG_M_H
#define __INET_ECNTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class EcnTagBase;
class EcnReq;
class EcnInd;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace inet {

/**
 * Enum generated from <tt>inet/networklayer/common/EcnTag.msg:12</tt> by opp_msgtool.
 * <pre>
 * enum IpEcnCode
 * {
 *     IP_ECN_NOT_ECT = 0;
 *     IP_ECN_ECT_1 = 1;
 *     IP_ECN_ECT_0 = 2;
 *     IP_ECN_CE = 3;
 * }
 * </pre>
 */
enum IpEcnCode {
    IP_ECN_NOT_ECT = 0,
    IP_ECN_ECT_1 = 1,
    IP_ECN_ECT_0 = 2,
    IP_ECN_CE = 3
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const IpEcnCode& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, IpEcnCode& e) { int n; b->unpack(n); e = static_cast<IpEcnCode>(n); }

/**
 * Class generated from <tt>inet/networklayer/common/EcnTag.msg:22</tt> by opp_msgtool.
 * <pre>
 * //
 * // This is an abstract base class that should not be directly added as a tag.
 * //
 * class EcnTagBase extends TagBase
 * {
 *     int explicitCongestionNotification = -1; // explicit congestion notification
 * }
 * </pre>
 */
class INET_API EcnTagBase : public ::inet::TagBase
{
  protected:
    int explicitCongestionNotification = -1;

  private:
    void copy(const EcnTagBase& other);

  protected:
    bool operator==(const EcnTagBase&) = delete;

  public:
    EcnTagBase();
    EcnTagBase(const EcnTagBase& other);
    virtual ~EcnTagBase();
    EcnTagBase& operator=(const EcnTagBase& other);
    virtual EcnTagBase *dup() const override {return new EcnTagBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getExplicitCongestionNotification() const;
    virtual void setExplicitCongestionNotification(int explicitCongestionNotification);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EcnTagBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EcnTagBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/common/EcnTag.msg:30</tt> by opp_msgtool.
 * <pre>
 * //
 * // This request determines the explicit congestion notification that should be used to transmit the packet.
 * //
 * class EcnReq extends EcnTagBase
 * {
 * }
 * </pre>
 */
class INET_API EcnReq : public ::inet::EcnTagBase
{
  protected:

  private:
    void copy(const EcnReq& other);

  protected:
    bool operator==(const EcnReq&) = delete;

  public:
    EcnReq();
    EcnReq(const EcnReq& other);
    virtual ~EcnReq();
    EcnReq& operator=(const EcnReq& other);
    virtual EcnReq *dup() const override {return new EcnReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EcnReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EcnReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/networklayer/common/EcnTag.msg:37</tt> by opp_msgtool.
 * <pre>
 * //
 * // This indication specifies the explicit congestion notification that was used to receive the packet.
 * //
 * class EcnInd extends EcnTagBase
 * {
 * }
 * </pre>
 */
class INET_API EcnInd : public ::inet::EcnTagBase
{
  protected:

  private:
    void copy(const EcnInd& other);

  protected:
    bool operator==(const EcnInd&) = delete;

  public:
    EcnInd();
    EcnInd(const EcnInd& other);
    virtual ~EcnInd();
    EcnInd& operator=(const EcnInd& other);
    virtual EcnInd *dup() const override {return new EcnInd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EcnInd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EcnInd& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::EcnTagBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::EcnTagBase*>(ptr.get<cObject>()); }
template<> inline inet::EcnReq *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::EcnReq*>(ptr.get<cObject>()); }
template<> inline inet::EcnInd *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::EcnInd*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_ECNTAG_M_H

