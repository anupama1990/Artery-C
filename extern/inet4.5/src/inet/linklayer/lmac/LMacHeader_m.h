//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/lmac/LMacHeader.msg.
//

#ifndef __INET_LMACHEADER_M_H
#define __INET_LMACHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class LMacHeaderBase;
class LMacControlFrame;
class LMacDataFrameHeader;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {

/**
 * Enum generated from <tt>inet/linklayer/lmac/LMacHeader.msg:13</tt> by opp_msgtool.
 * <pre>
 * //TODO split to 2 enums: for packets / for self messages
 * enum LMacType
 * {
 *     LMAC_CONTROL = 167;     // packet type
 *     LMAC_TIMEOUT = 168;
 *     LMAC_WAKEUP = 169;
 *     LMAC_SEND_DATA = 170;
 *     LMAC_SETUP_PHASE_END = 171;
 *     LMAC_CHECK_CHANNEL = 172;
 *     LMAC_SOMEBODY = 173;
 *     LMAC_DATA = 174;     // packet type
 *     LMAC_START_LMAC = 175;
 *     LMAC_SEND_CONTROL = 176;
 * }
 * </pre>
 */
enum LMacType {
    LMAC_CONTROL = 167,
    LMAC_TIMEOUT = 168,
    LMAC_WAKEUP = 169,
    LMAC_SEND_DATA = 170,
    LMAC_SETUP_PHASE_END = 171,
    LMAC_CHECK_CHANNEL = 172,
    LMAC_SOMEBODY = 173,
    LMAC_DATA = 174,
    LMAC_START_LMAC = 175,
    LMAC_SEND_CONTROL = 176
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LMacType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LMacType& e) { int n; b->unpack(n); e = static_cast<LMacType>(n); }

/**
 * Class generated from <tt>inet/linklayer/lmac/LMacHeader.msg:30</tt> by opp_msgtool.
 * <pre>
 * //
 * // Base class for ~LMac headers.
 * //
 * class LMacHeaderBase extends FieldsChunk
 * {
 *     MacAddress srcAddr;
 *     MacAddress destAddr;
 *     LMacType type;
 *     int mySlot; // the node's current slot number
 *     MacAddress occupiedSlots[]; // currently known occupied slots
 * }
 * </pre>
 */
class INET_API LMacHeaderBase : public ::inet::FieldsChunk
{
  protected:
    MacAddress srcAddr;
    MacAddress destAddr;
    LMacType type = static_cast<inet::LMacType>(-1);
    int mySlot = 0;
    MacAddress *occupiedSlots = nullptr;
    size_t occupiedSlots_arraysize = 0;

  private:
    void copy(const LMacHeaderBase& other);

  protected:
    bool operator==(const LMacHeaderBase&) = delete;

  public:
    LMacHeaderBase();
    LMacHeaderBase(const LMacHeaderBase& other);
    virtual ~LMacHeaderBase();
    LMacHeaderBase& operator=(const LMacHeaderBase& other);
    virtual LMacHeaderBase *dup() const override {return new LMacHeaderBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const MacAddress& getSrcAddr() const;
    virtual MacAddress& getSrcAddrForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<LMacHeaderBase*>(this)->getSrcAddr());}
    virtual void setSrcAddr(const MacAddress& srcAddr);

    virtual const MacAddress& getDestAddr() const;
    virtual MacAddress& getDestAddrForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<LMacHeaderBase*>(this)->getDestAddr());}
    virtual void setDestAddr(const MacAddress& destAddr);

    virtual LMacType getType() const;
    virtual void setType(LMacType type);

    virtual int getMySlot() const;
    virtual void setMySlot(int mySlot);

    virtual void setOccupiedSlotsArraySize(size_t size);
    virtual size_t getOccupiedSlotsArraySize() const;
    virtual const MacAddress& getOccupiedSlots(size_t k) const;
    virtual MacAddress& getOccupiedSlotsForUpdate(size_t k) { handleChange();return const_cast<MacAddress&>(const_cast<LMacHeaderBase*>(this)->getOccupiedSlots(k));}
    virtual void setOccupiedSlots(size_t k, const MacAddress& occupiedSlots);
    virtual void insertOccupiedSlots(size_t k, const MacAddress& occupiedSlots);
    [[deprecated]] void insertOccupiedSlots(const MacAddress& occupiedSlots) {appendOccupiedSlots(occupiedSlots);}
    virtual void appendOccupiedSlots(const MacAddress& occupiedSlots);
    virtual void eraseOccupiedSlots(size_t k);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LMacHeaderBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LMacHeaderBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/lmac/LMacHeader.msg:43</tt> by opp_msgtool.
 * <pre>
 * //
 * // Control Frame for ~LMac. Frame size is configurable
 * // in the MAC layer.
 * //
 * class LMacControlFrame extends LMacHeaderBase
 * {
 * }
 * </pre>
 */
class INET_API LMacControlFrame : public ::inet::LMacHeaderBase
{
  protected:

  private:
    void copy(const LMacControlFrame& other);

  protected:
    bool operator==(const LMacControlFrame&) = delete;

  public:
    LMacControlFrame();
    LMacControlFrame(const LMacControlFrame& other);
    virtual ~LMacControlFrame();
    LMacControlFrame& operator=(const LMacControlFrame& other);
    virtual LMacControlFrame *dup() const override {return new LMacControlFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LMacControlFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LMacControlFrame& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/lmac/LMacHeader.msg:51</tt> by opp_msgtool.
 * <pre>
 * //
 * // Dataframe header for ~LMac. Frame size is configurable
 * // in the MAC layer.
 * //
 * class LMacDataFrameHeader extends LMacHeaderBase
 * {
 *     int networkProtocol = -1;
 * }
 * </pre>
 */
class INET_API LMacDataFrameHeader : public ::inet::LMacHeaderBase
{
  protected:
    int networkProtocol = -1;

  private:
    void copy(const LMacDataFrameHeader& other);

  protected:
    bool operator==(const LMacDataFrameHeader&) = delete;

  public:
    LMacDataFrameHeader();
    LMacDataFrameHeader(const LMacDataFrameHeader& other);
    virtual ~LMacDataFrameHeader();
    LMacDataFrameHeader& operator=(const LMacDataFrameHeader& other);
    virtual LMacDataFrameHeader *dup() const override {return new LMacDataFrameHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getNetworkProtocol() const;
    virtual void setNetworkProtocol(int networkProtocol);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LMacDataFrameHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LMacDataFrameHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::LMacHeaderBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::LMacHeaderBase*>(ptr.get<cObject>()); }
template<> inline inet::LMacControlFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::LMacControlFrame*>(ptr.get<cObject>()); }
template<> inline inet::LMacDataFrameHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::LMacDataFrameHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_LMACHEADER_M_H

