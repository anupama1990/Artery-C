//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/ieee8021ae/Ieee8021aeTagHeader.msg.
//

#ifndef __INET_IEEE8021AETAGHEADER_M_H
#define __INET_IEEE8021AETAGHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class Ieee8021aeTagTpidHeader;
class Ieee8021aeTagEpdHeader;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/ieee8021ae/Ieee8021aeTagHeader.msg:30</tt> by opp_msgtool.
 * <pre>
 * //
 * // This chunk represents an IEEE 802.1AE tag header as defined by the section
 * // 9.3 MAC Security TAG of the IEEE Std 802AE-2018, IEEE Standard for Local and
 * // metropolitan area networks, Media Access Control (MAC) Security.
 * //
 * //  0                   1                   2                   3
 * //  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * // +-------------------------------+---------------+---------------+
 * // |              TPID             |     TCI/AN    |       SL      |
 * // +-------------------------------+---------------+---------------+
 * // |                               PN                              |
 * // +---------------------------------------------------------------+
 * // |                                                               |
 * // +                              SCI                              +
 * // |                                                               |
 * // +---------------------------------------------------------------+
 * //
 * class Ieee8021aeTagTpidHeader extends FieldsChunk
 * {
 *     chunkLength = B(8); // Length without SCI. Set it to B(16) when hasSci is true.
 *     uint16_t tpid;      // Tag Protocol Identifier (TPID): 16-bit field specifying an EtherType value that is used to identify the frame as a tagged frame and to select the correct tag decoding functions.
 *     uint8_t tciAn;
 *     uint8_t sl;
 *     uint32_t pn;
 *     uint64_t sci;
 * }
 * </pre>
 */
class INET_API Ieee8021aeTagTpidHeader : public ::inet::FieldsChunk
{
  protected:
    uint16_t tpid = 0;
    uint8_t tciAn = 0;
    uint8_t sl = 0;
    uint32_t pn = 0;
    uint64_t sci = 0;

  private:
    void copy(const Ieee8021aeTagTpidHeader& other);

  protected:
    bool operator==(const Ieee8021aeTagTpidHeader&) = delete;

  public:
    Ieee8021aeTagTpidHeader();
    Ieee8021aeTagTpidHeader(const Ieee8021aeTagTpidHeader& other);
    virtual ~Ieee8021aeTagTpidHeader();
    Ieee8021aeTagTpidHeader& operator=(const Ieee8021aeTagTpidHeader& other);
    virtual Ieee8021aeTagTpidHeader *dup() const override {return new Ieee8021aeTagTpidHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getTpid() const;
    virtual void setTpid(uint16_t tpid);

    virtual uint8_t getTciAn() const;
    virtual void setTciAn(uint8_t tciAn);

    virtual uint8_t getSl() const;
    virtual void setSl(uint8_t sl);

    virtual uint32_t getPn() const;
    virtual void setPn(uint32_t pn);

    virtual uint64_t getSci() const;
    virtual void setSci(uint64_t sci);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee8021aeTagTpidHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee8021aeTagTpidHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee8021ae/Ieee8021aeTagHeader.msg:60</tt> by opp_msgtool.
 * <pre>
 * //
 * // This chunk represents an IEEE 802.1AE tag header without the TPID field and
 * // with the following EtherType Protocol Discrimination (EPD) in the packet.
 * // The reason for this shifted representation is that it's often easier to look
 * // at an 802.1AE tag this way during processing. The typeOrLength field contains
 * // the EtherType as defined in the section 9.2 EtherTypes of the IEEE Std 802-2014,
 * // IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture.
 * //
 * //  0                   1                   2                   3
 * //  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * // +---------------+---------------+-------------------------------+
 * // |     TCI/AN    |       SL      |               PN              |
 * // +---------------+---------------+-------------------------------+
 * // |              PN               |                               |
 * // +-------------------------------+                               +
 * // |                              SCI                              |
 * // +                               +-------------------------------+
 * // |                               |        EtherType/Length       |
 * // +---------------------------------------------------------------+
 * //
 * class Ieee8021aeTagEpdHeader extends FieldsChunk
 * {
 *     chunkLength = B(8);   // Length without SCI. Set it to B(16) when hasSci is true.
 *     uint8_t tciAn;
 *     uint8_t sl;
 *     uint32_t pn;
 *     uint64_t sci;
 *     uint16_t typeOrLength; // This field contains the 16 bits immediately following the 802.1Q tag header TCI field:
 *                            // I. Tag Protocol Identifier (TPID) of the following tag header: 16-bit field specifying an EtherType value that is used to identify the frame as a tagged frame and to select the correct tag decoding functions.
 *                            // II. This two-octet field takes one of two meanings, depending on its numeric value. For numerical evaluation,
 *                            //     the first octet is the most significant octet of this field.
 *                            //     a) If the value of this field is less than or equal to 1500 decimal (05DC hexadecimal), then the Length/
 *                            //        Type field indicates the number of MAC client data octets contained in the subsequent MAC Client
 *                            //        Data field of the basic frame (Length interpretation).
 *                            //     b) If the value of this field is greater than or equal to 1536 decimal (0600 hexadecimal), then the
 *                            //        Length/Type field indicates the Ethertype of the MAC client protocol (Type interpretation).
 * }
 * </pre>
 */
class INET_API Ieee8021aeTagEpdHeader : public ::inet::FieldsChunk
{
  protected:
    uint8_t tciAn = 0;
    uint8_t sl = 0;
    uint32_t pn = 0;
    uint64_t sci = 0;
    uint16_t typeOrLength = 0;

  private:
    void copy(const Ieee8021aeTagEpdHeader& other);

  protected:
    bool operator==(const Ieee8021aeTagEpdHeader&) = delete;

  public:
    Ieee8021aeTagEpdHeader();
    Ieee8021aeTagEpdHeader(const Ieee8021aeTagEpdHeader& other);
    virtual ~Ieee8021aeTagEpdHeader();
    Ieee8021aeTagEpdHeader& operator=(const Ieee8021aeTagEpdHeader& other);
    virtual Ieee8021aeTagEpdHeader *dup() const override {return new Ieee8021aeTagEpdHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint8_t getTciAn() const;
    virtual void setTciAn(uint8_t tciAn);

    virtual uint8_t getSl() const;
    virtual void setSl(uint8_t sl);

    virtual uint32_t getPn() const;
    virtual void setPn(uint32_t pn);

    virtual uint64_t getSci() const;
    virtual void setSci(uint64_t sci);

    virtual uint16_t getTypeOrLength() const;
    virtual void setTypeOrLength(uint16_t typeOrLength);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee8021aeTagEpdHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee8021aeTagEpdHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::Ieee8021aeTagTpidHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ieee8021aeTagTpidHeader*>(ptr.get<cObject>()); }
template<> inline inet::Ieee8021aeTagEpdHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ieee8021aeTagEpdHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_IEEE8021AETAGHEADER_M_H

