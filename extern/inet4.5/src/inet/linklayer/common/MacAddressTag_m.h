//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/common/MacAddressTag.msg.
//

#ifndef __INET_MACADDRESSTAG_M_H
#define __INET_MACADDRESSTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class MacAddressTagBase;
class MacAddressReq;
class MacAddressInd;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/common/MacAddressTag.msg:14</tt> by opp_msgtool.
 * <pre>
 * class MacAddressTagBase extends TagBase
 * {
 *     MacAddress srcAddress;      // may be unspecified
 *     MacAddress destAddress; // always specified
 * }
 * </pre>
 */
class INET_API MacAddressTagBase : public ::inet::TagBase
{
  protected:
    MacAddress srcAddress;
    MacAddress destAddress;

  private:
    void copy(const MacAddressTagBase& other);

  protected:
    bool operator==(const MacAddressTagBase&) = delete;

  public:
    MacAddressTagBase();
    MacAddressTagBase(const MacAddressTagBase& other);
    virtual ~MacAddressTagBase();
    MacAddressTagBase& operator=(const MacAddressTagBase& other);
    virtual MacAddressTagBase *dup() const override {return new MacAddressTagBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const MacAddress& getSrcAddress() const;
    virtual MacAddress& getSrcAddressForUpdate() { return const_cast<MacAddress&>(const_cast<MacAddressTagBase*>(this)->getSrcAddress());}
    virtual void setSrcAddress(const MacAddress& srcAddress);

    virtual const MacAddress& getDestAddress() const;
    virtual MacAddress& getDestAddressForUpdate() { return const_cast<MacAddress&>(const_cast<MacAddressTagBase*>(this)->getDestAddress());}
    virtual void setDestAddress(const MacAddress& destAddress);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacAddressTagBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacAddressTagBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/common/MacAddressTag.msg:23</tt> by opp_msgtool.
 * <pre>
 * //
 * // Determines the source and destination MAC addresses for an outgoing packet.
 * //
 * class MacAddressReq extends MacAddressTagBase
 * {
 * }
 * </pre>
 */
class INET_API MacAddressReq : public ::inet::MacAddressTagBase
{
  protected:

  private:
    void copy(const MacAddressReq& other);

  protected:
    bool operator==(const MacAddressReq&) = delete;

  public:
    MacAddressReq();
    MacAddressReq(const MacAddressReq& other);
    virtual ~MacAddressReq();
    MacAddressReq& operator=(const MacAddressReq& other);
    virtual MacAddressReq *dup() const override {return new MacAddressReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacAddressReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacAddressReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/common/MacAddressTag.msg:30</tt> by opp_msgtool.
 * <pre>
 * //
 * // Specifies the source and destination MAC addresses for an incoming packet.
 * //
 * class MacAddressInd extends MacAddressTagBase
 * {
 * }
 * </pre>
 */
class INET_API MacAddressInd : public ::inet::MacAddressTagBase
{
  protected:

  private:
    void copy(const MacAddressInd& other);

  protected:
    bool operator==(const MacAddressInd&) = delete;

  public:
    MacAddressInd();
    MacAddressInd(const MacAddressInd& other);
    virtual ~MacAddressInd();
    MacAddressInd& operator=(const MacAddressInd& other);
    virtual MacAddressInd *dup() const override {return new MacAddressInd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const MacAddressInd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, MacAddressInd& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::MacAddressTagBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::MacAddressTagBase*>(ptr.get<cObject>()); }
template<> inline inet::MacAddressReq *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::MacAddressReq*>(ptr.get<cObject>()); }
template<> inline inet::MacAddressInd *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::MacAddressInd*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_MACADDRESSTAG_M_H

