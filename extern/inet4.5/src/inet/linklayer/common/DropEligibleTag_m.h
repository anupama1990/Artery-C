//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/common/DropEligibleTag.msg.
//

#ifndef __INET_DROPELIGIBLETAG_M_H
#define __INET_DROPELIGIBLETAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class DropEligibleTagBase;
class DropEligibleReq;
class DropEligibleInd;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/common/DropEligibleTag.msg:16</tt> by opp_msgtool.
 * <pre>
 * //
 * // This is an abstract base class that should not be directly added as a tag.
 * //
 * class DropEligibleTagBase extends TagBase
 * {
 *     bool DropEligible = false;
 * }
 * </pre>
 */
class INET_API DropEligibleTagBase : public ::inet::TagBase
{
  protected:
    bool DropEligible = false;

  private:
    void copy(const DropEligibleTagBase& other);

  protected:
    bool operator==(const DropEligibleTagBase&) = delete;

  public:
    DropEligibleTagBase();
    DropEligibleTagBase(const DropEligibleTagBase& other);
    virtual ~DropEligibleTagBase();
    DropEligibleTagBase& operator=(const DropEligibleTagBase& other);
    virtual DropEligibleTagBase *dup() const override {return new DropEligibleTagBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual bool getDropEligible() const;
    virtual void setDropEligible(bool DropEligible);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DropEligibleTagBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DropEligibleTagBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/common/DropEligibleTag.msg:25</tt> by opp_msgtool.
 * <pre>
 * //
 * // This request determines the DropEligible that should be used to send the packet.
 * // It may be present on a packet from the application to the mac protocol.
 * //
 * class DropEligibleReq extends DropEligibleTagBase
 * {
 * }
 * </pre>
 */
class INET_API DropEligibleReq : public ::inet::DropEligibleTagBase
{
  protected:

  private:
    void copy(const DropEligibleReq& other);

  protected:
    bool operator==(const DropEligibleReq&) = delete;

  public:
    DropEligibleReq();
    DropEligibleReq(const DropEligibleReq& other);
    virtual ~DropEligibleReq();
    DropEligibleReq& operator=(const DropEligibleReq& other);
    virtual DropEligibleReq *dup() const override {return new DropEligibleReq(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DropEligibleReq& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DropEligibleReq& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/common/DropEligibleTag.msg:33</tt> by opp_msgtool.
 * <pre>
 * //
 * // This indication specifies the DropEligible that was used to receive the packet.
 * // It may be present on a packet from the mac protocol to the application.
 * //
 * class DropEligibleInd extends DropEligibleTagBase
 * {
 * }
 * </pre>
 */
class INET_API DropEligibleInd : public ::inet::DropEligibleTagBase
{
  protected:

  private:
    void copy(const DropEligibleInd& other);

  protected:
    bool operator==(const DropEligibleInd&) = delete;

  public:
    DropEligibleInd();
    DropEligibleInd(const DropEligibleInd& other);
    virtual ~DropEligibleInd();
    DropEligibleInd& operator=(const DropEligibleInd& other);
    virtual DropEligibleInd *dup() const override {return new DropEligibleInd(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DropEligibleInd& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DropEligibleInd& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::DropEligibleTagBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::DropEligibleTagBase*>(ptr.get<cObject>()); }
template<> inline inet::DropEligibleReq *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::DropEligibleReq*>(ptr.get<cObject>()); }
template<> inline inet::DropEligibleInd *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::DropEligibleInd*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_DROPELIGIBLETAG_M_H

