//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/common/EtherType.msg.
//

#ifndef __INET_ETHERTYPE_M_H
#define __INET_ETHERTYPE_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {


}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs


namespace inet {

/**
 * Enum generated from <tt>inet/linklayer/common/EtherType.msg:15</tt> by opp_msgtool.
 * <pre>
 * //
 * // Some EtherType values (Ethernet II).
 * //
 * enum EtherType
 * {
 *     ETHERTYPE_IPv4 = 0x0800;
 *     ETHERTYPE_ARP = 0x0806;
 *     ETHERTYPE_INET_CDP = 0x2000;
 *     ETHERTYPE_SRP = 0x22EA;
 *     ETHERTYPE_TSN = 0x22F0;
 *     ETHERTYPE_TRILL = 0x22F3;
 *     ETHERTYPE_L2_ISIS = 0x22F4;
 *     ETHERTYPE_INET_FLOODING = 0x36FC;
 *     ETHERTYPE_RARP = 0x8035;
 *     ETHERTYPE_8021Q_TAG = 0x8100;
 *     ETHERTYPE_IPv6 = 0x86DD;
 *     ETHERTYPE_UNKNOWN = 0x86F0;
 *     ETHERTYPE_INET_PROBABILISTIC = 0x86FD;
 *     ETHERTYPE_INET_WISEROUTE = 0x86FE;
 *     ETHERTYPE_NEXT_HOP_FORWARDING = 0x86FF;    // not in standard, INET spceific value for \@NextHopForwarding
 *     ETHERTYPE_FLOW_CONTROL = 0x8808;
 *     ETHERTYPE_MPLS_UNICAST = 0x8847;
 *     ETHERTYPE_MPLS_MULTICAST = 0x8848;
 *     ETHERTYPE_8021ad_S_TAG = 0x88A8;
 *     ETHERTYPE_LLDP = 0x88CC;
 *     ETHERTYPE_IEEE8021AE = 0x88E5;
 *     ETHERTYPE_GPTP = 0x88F7;
 *     ETHERTYPE_TTETH = 0x891D;
 *     ETHERTYPE_IEEE8021_R_TAG = 0xF1C1;
 * }
 * </pre>
 */
enum EtherType {
    ETHERTYPE_IPv4 = 0x0800,
    ETHERTYPE_ARP = 0x0806,
    ETHERTYPE_INET_CDP = 0x2000,
    ETHERTYPE_SRP = 0x22EA,
    ETHERTYPE_TSN = 0x22F0,
    ETHERTYPE_TRILL = 0x22F3,
    ETHERTYPE_L2_ISIS = 0x22F4,
    ETHERTYPE_INET_FLOODING = 0x36FC,
    ETHERTYPE_RARP = 0x8035,
    ETHERTYPE_8021Q_TAG = 0x8100,
    ETHERTYPE_IPv6 = 0x86DD,
    ETHERTYPE_UNKNOWN = 0x86F0,
    ETHERTYPE_INET_PROBABILISTIC = 0x86FD,
    ETHERTYPE_INET_WISEROUTE = 0x86FE,
    ETHERTYPE_NEXT_HOP_FORWARDING = 0x86FF,
    ETHERTYPE_FLOW_CONTROL = 0x8808,
    ETHERTYPE_MPLS_UNICAST = 0x8847,
    ETHERTYPE_MPLS_MULTICAST = 0x8848,
    ETHERTYPE_8021ad_S_TAG = 0x88A8,
    ETHERTYPE_LLDP = 0x88CC,
    ETHERTYPE_IEEE8021AE = 0x88E5,
    ETHERTYPE_GPTP = 0x88F7,
    ETHERTYPE_TTETH = 0x891D,
    ETHERTYPE_IEEE8021_R_TAG = 0xF1C1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EtherType& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EtherType& e) { int n; b->unpack(n); e = static_cast<EtherType>(n); }

// cplusplus {{
    inline bool isEth2Type(int typeOrLength)  { return typeOrLength >= 0x600 || typeOrLength == 0; }  // typeOrLength is type
    inline bool isIeee8023Length(int typeOrLength)  { return typeOrLength > 0 && typeOrLength < 0x600; }  // typeOrLength is length
// }}


}  // namespace inet


namespace omnetpp {


}  // namespace omnetpp

#endif // ifndef __INET_ETHERTYPE_M_H

