//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/ieee8021r/Ieee8021rTagHeader.msg.
//

#ifndef __INET_IEEE8021RTAGHEADER_M_H
#define __INET_IEEE8021RTAGHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class Ieee8021rTagTpidHeader;
class Ieee8021rTagEpdHeader;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/ieee8021r/Ieee8021rTagHeader.msg:26</tt> by opp_msgtool.
 * <pre>
 * //
 * // This chunk represents an IEEE 802.1R tag header as defined by the section
 * // 7.8 Tag format of the IEEE Std 802.1CB-2017, IEEE Standard for Local and
 * // Metropolitan Area Networks, Frame Replication and Elimination for Reliability.
 * //
 * //  0                   1                   2                   3
 * //  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * // +-------------------------------+-------------------------------+
 * // |          TPID = 0xF1C1        |          Reserved = 0         |
 * // +-------------------------------+-------------------------------+
 * // |         SequenceNumber        |
 * // +-------------------------------+
 * //
 * class Ieee8021rTagTpidHeader extends FieldsChunk
 * {
 *     chunkLength = B(6);
 *     uint16_t sequenceNumber = 0;
 * }
 * </pre>
 */
class INET_API Ieee8021rTagTpidHeader : public ::inet::FieldsChunk
{
  protected:
    uint16_t sequenceNumber = 0;

  private:
    void copy(const Ieee8021rTagTpidHeader& other);

  protected:
    bool operator==(const Ieee8021rTagTpidHeader&) = delete;

  public:
    Ieee8021rTagTpidHeader();
    Ieee8021rTagTpidHeader(const Ieee8021rTagTpidHeader& other);
    virtual ~Ieee8021rTagTpidHeader();
    Ieee8021rTagTpidHeader& operator=(const Ieee8021rTagTpidHeader& other);
    virtual Ieee8021rTagTpidHeader *dup() const override {return new Ieee8021rTagTpidHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getSequenceNumber() const;
    virtual void setSequenceNumber(uint16_t sequenceNumber);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee8021rTagTpidHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee8021rTagTpidHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee8021r/Ieee8021rTagHeader.msg:48</tt> by opp_msgtool.
 * <pre>
 * //
 * // This chunk represents an IEEE 802.1R tag header without the TPID field and
 * // with the following EtherType Protocol Discrimination (EPD) in the packet.
 * // The reason for this shifted representation is that it's often easier to look
 * // at a 802.1Q tag this way during processing. The typeOrLength field contains
 * // the EtherType as defined in the section 9.2 EtherTypes of the IEEE Std 802-2014,
 * // IEEE Standard for Local and Metropolitan Area Networks: Overview and Architecture.
 * //
 * //  0                   1                   2                   3
 * //  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * // +-------------------------------+-------------------------------+
 * // |          Reserved = 0         |         SequenceNumber        |
 * // +-------------------------------+-------------------------------+
 * // |        EtherType/Length       |
 * // +-------------------------------+
 * //
 * class Ieee8021rTagEpdHeader extends FieldsChunk
 * {
 *     chunkLength = B(6);
 *     uint16_t sequenceNumber = 0;
 *     uint16_t typeOrLength; // This field contains the 16 bits immediately following the 802.1R tag header TCI field:
 *                            // I. Tag Protocol Identifier (TPID) of the following tag header: 16-bit field specifying an EtherType value that is used to identify the frame as a tagged frame and to select the correct tag decoding functions.
 *                            // II. This two-octet field takes one of two meanings, depending on its numeric value. For numerical evaluation,
 *                            //     the first octet is the most significant octet of this field.
 *                            //     a) If the value of this field is less than or equal to 1500 decimal (05DC hexadecimal), then the Length/
 *                            //        Type field indicates the number of MAC client data octets contained in the subsequent MAC Client
 *                            //        Data field of the basic frame (Length interpretation).
 *                            //     b) If the value of this field is greater than or equal to 1536 decimal (0600 hexadecimal), then the
 *                            //        Length/Type field indicates the Ethertype of the MAC client protocol (Type interpretation).
 * }
 * </pre>
 */
class INET_API Ieee8021rTagEpdHeader : public ::inet::FieldsChunk
{
  protected:
    uint16_t sequenceNumber = 0;
    uint16_t typeOrLength = 0;

  private:
    void copy(const Ieee8021rTagEpdHeader& other);

  protected:
    bool operator==(const Ieee8021rTagEpdHeader&) = delete;

  public:
    Ieee8021rTagEpdHeader();
    Ieee8021rTagEpdHeader(const Ieee8021rTagEpdHeader& other);
    virtual ~Ieee8021rTagEpdHeader();
    Ieee8021rTagEpdHeader& operator=(const Ieee8021rTagEpdHeader& other);
    virtual Ieee8021rTagEpdHeader *dup() const override {return new Ieee8021rTagEpdHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual uint16_t getSequenceNumber() const;
    virtual void setSequenceNumber(uint16_t sequenceNumber);

    virtual uint16_t getTypeOrLength() const;
    virtual void setTypeOrLength(uint16_t typeOrLength);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee8021rTagEpdHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee8021rTagEpdHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::Ieee8021rTagTpidHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ieee8021rTagTpidHeader*>(ptr.get<cObject>()); }
template<> inline inet::Ieee8021rTagEpdHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ieee8021rTagEpdHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_IEEE8021RTAGHEADER_M_H

