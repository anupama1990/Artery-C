//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/ieee8022/Ieee8022SnapHeader.msg.
//

#ifndef __INET_IEEE8022SNAPHEADER_M_H
#define __INET_IEEE8022SNAPHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class Ieee8022SnapHeader;
class Ieee8022LlcSnapHeader;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/ieee8022/Ieee8022LlcHeader_m.h" // import inet.linklayer.ieee8022.Ieee8022LlcHeader


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/ieee8022/Ieee8022SnapHeader.msg:27</tt> by opp_msgtool.
 * <pre>
 * //
 * // This chunk represents an IEEE 802.2 LLC header SNAP extension as defined by
 * // the section 9.5 SNAP of the IEEE Std 802-2014, IEEE Standard for Local and
 * // Metropolitan Area Networks: Overview and Architecture.
 * //
 * //  0                   1                   2                   3
 * //  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * // +-----------------------------------------------+---------------+
 * // |                      OUI                      |   PROTOCOLID  |
 * // +---------------+-------------------------------+---------------+
 * // |   PROTOCOLID  |
 * // +---------------+
 * //
 * class Ieee8022SnapHeader extends FieldsChunk
 * {
 *     chunkLength = B(5);
 *     int oui = -1;   // organizationally unique identifier (OUI); 0 for protocols that have an EtherType (ARP, IPv4, IPv6, etc.), 3 bytes
 *     int protocolId = -1; // protocol identifier (PID); stores ~EtherType if orgCode is 0, 2 bytes
 * }
 * </pre>
 */
class INET_API Ieee8022SnapHeader : public ::inet::FieldsChunk
{
  protected:
    int oui = -1;
    int protocolId = -1;

  private:
    void copy(const Ieee8022SnapHeader& other);

  protected:
    bool operator==(const Ieee8022SnapHeader&) = delete;

  public:
    Ieee8022SnapHeader();
    Ieee8022SnapHeader(const Ieee8022SnapHeader& other);
    virtual ~Ieee8022SnapHeader();
    Ieee8022SnapHeader& operator=(const Ieee8022SnapHeader& other);
    virtual Ieee8022SnapHeader *dup() const override {return new Ieee8022SnapHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getOui() const;
    virtual void setOui(int oui);

    virtual int getProtocolId() const;
    virtual void setProtocolId(int protocolId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee8022SnapHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee8022SnapHeader& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ieee8022/Ieee8022SnapHeader.msg:47</tt> by opp_msgtool.
 * <pre>
 * //
 * // This chunk represents an IEEE 802.2 LLC header with SNAP extension as defined
 * // by the section 9.2.4 OUI Extended EtherType of the IEEE Std 802-2014, IEEE
 * // Standard for Local and Metropolitan Area Networks: Overview and Architecture.
 * //
 * //  0                   1                   2                   3
 * //  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * // +---------------+---------------+---------------+---------------+
 * // |      DSAP     |      SSAP     |    CONTROL    |      OUI      |
 * // +---------------+---------------+---------------+---------------+
 * // |              OUI              |           PROTOCOLID          |
 * // +-------------------------------+-------------------------------+
 * //
 * class Ieee8022LlcSnapHeader extends Ieee8022LlcHeader
 * {
 *     chunkLength = B(8);
 *     dsap = 0xAA;
 *     ssap = 0xAA;
 *     control = 0x03;
 *     int oui = -1;   // organizationally unique identifier (OUI); 0 for protocols that have an EtherType (ARP, IPv4, IPv6, etc.), 3 bytes
 *     int protocolId = -1; // protocol identifier (PID); stores ~EtherType if orgCode is 0, 2 bytes
 * }
 * </pre>
 */
class INET_API Ieee8022LlcSnapHeader : public ::inet::Ieee8022LlcHeader
{
  protected:
    int oui = -1;
    int protocolId = -1;

  private:
    void copy(const Ieee8022LlcSnapHeader& other);

  protected:
    bool operator==(const Ieee8022LlcSnapHeader&) = delete;

  public:
    Ieee8022LlcSnapHeader();
    Ieee8022LlcSnapHeader(const Ieee8022LlcSnapHeader& other);
    virtual ~Ieee8022LlcSnapHeader();
    Ieee8022LlcSnapHeader& operator=(const Ieee8022LlcSnapHeader& other);
    virtual Ieee8022LlcSnapHeader *dup() const override {return new Ieee8022LlcSnapHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getOui() const;
    virtual void setOui(int oui);

    virtual int getProtocolId() const;
    virtual void setProtocolId(int protocolId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee8022LlcSnapHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee8022LlcSnapHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::Ieee8022SnapHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ieee8022SnapHeader*>(ptr.get<cObject>()); }
template<> inline inet::Ieee8022LlcSnapHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ieee8022LlcSnapHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_IEEE8022SNAPHEADER_M_H

