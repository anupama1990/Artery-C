//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/ieee80211/llc/LlcProtocolTag.msg.
//

#ifndef __INET__IEEE80211_LLCPROTOCOLTAG_M_H
#define __INET__IEEE80211_LLCPROTOCOLTAG_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {
namespace ieee80211 {

class LlcProtocolTag;

}  // namespace ieee80211
}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/TagBase_m.h" // import inet.common.TagBase

#include "inet/common/Units_m.h" // import inet.common.Units

// cplusplus {{
#include "inet/common/Protocol.h"
#include "inet/common/ProtocolGroup.h"
// }}


namespace inet {
namespace ieee80211 {

// cplusplus {{
static ProtocolGroup llc("llc", {
    { 0, &Protocol::ieee8022llc },
    { 1, &Protocol::ieee802epd }
});
// }}

/**
 * Enum generated from <tt>inet/linklayer/ieee80211/llc/LlcProtocolTag.msg:25</tt> by opp_msgtool.
 * <pre>
 * enum LlcProtocolId
 * {
 *     LPD = 0; // IEEE 802.2 LLC header (with SNAP)
 *     EPD = 1; // plain EtherType header
 * }
 * </pre>
 */
enum LlcProtocolId {
    LPD = 0,
    EPD = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LlcProtocolId& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LlcProtocolId& e) { int n; b->unpack(n); e = static_cast<LlcProtocolId>(n); }

/**
 * Class generated from <tt>inet/linklayer/ieee80211/llc/LlcProtocolTag.msg:35</tt> by opp_msgtool.
 * <pre>
 * //
 * // Marks the packet's LLC protocol
 * // NOTE: No packet field indicates the LLC protocol, it depends on the used band!
 * //
 * class LlcProtocolTag extends TagBase
 * {
 *     int protocolId \@enum(LlcProtocolId);
 * }
 * </pre>
 */
class INET_API LlcProtocolTag : public ::inet::TagBase
{
  protected:
    int protocolId = 0;

  private:
    void copy(const LlcProtocolTag& other);

  protected:
    bool operator==(const LlcProtocolTag&) = delete;

  public:
    LlcProtocolTag();
    LlcProtocolTag(const LlcProtocolTag& other);
    virtual ~LlcProtocolTag();
    LlcProtocolTag& operator=(const LlcProtocolTag& other);
    virtual LlcProtocolTag *dup() const override {return new LlcProtocolTag(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getProtocolId() const;
    virtual void setProtocolId(int protocolId);


    virtual const Protocol *getProtocol() const { return llc.findProtocol(getProtocolId()); }
    virtual void setProtocol(const Protocol *protocol) { setProtocolId(static_cast<LlcProtocolId>(protocol->getId())); }
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const LlcProtocolTag& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, LlcProtocolTag& obj) {obj.parsimUnpack(b);}


}  // namespace ieee80211
}  // namespace inet


namespace omnetpp {

template<> inline inet::ieee80211::LlcProtocolTag *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::ieee80211::LlcProtocolTag*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET__IEEE80211_LLCPROTOCOLTAG_M_H

