//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/ethernet/common/EthernetControlFrame.msg.
//

#ifndef __INET_ETHERNETCONTROLFRAME_M_H
#define __INET_ETHERNETCONTROLFRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class EthernetControlFrameBase;
class EthernetPauseFrame;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk


namespace inet {

/**
 * Enum generated from <tt>inet/linklayer/ethernet/common/EthernetControlFrame.msg:13</tt> by opp_msgtool.
 * <pre>
 * enum EthernetControlOpCode
 * {
 *     ETHERNET_CONTROL_PAUSE = 1;
 * }
 * </pre>
 */
enum EthernetControlOpCode {
    ETHERNET_CONTROL_PAUSE = 1
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetControlOpCode& e) { b->pack(static_cast<int>(e)); }
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetControlOpCode& e) { int n; b->unpack(n); e = static_cast<EthernetControlOpCode>(n); }

/**
 * Class generated from <tt>inet/linklayer/ethernet/common/EthernetControlFrame.msg:22</tt> by opp_msgtool.
 * <pre>
 * //
 * // This is a base class for all IEEE 802.3 Ethernet control frames defined the
 * // IEEE Std 802.3-2018, IEEE Standard for Ethernet.
 * //
 * class EthernetControlFrameBase extends FieldsChunk
 * {
 *     int opCode = -1;
 * }
 * </pre>
 */
class INET_API EthernetControlFrameBase : public ::inet::FieldsChunk
{
  protected:
    int opCode = -1;

  private:
    void copy(const EthernetControlFrameBase& other);

  protected:
    bool operator==(const EthernetControlFrameBase&) = delete;

  public:
    EthernetControlFrameBase();
    EthernetControlFrameBase(const EthernetControlFrameBase& other);
    virtual ~EthernetControlFrameBase();
    EthernetControlFrameBase& operator=(const EthernetControlFrameBase& other);
    virtual EthernetControlFrameBase *dup() const override {return new EthernetControlFrameBase(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getOpCode() const;
    virtual void setOpCode(int opCode);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetControlFrameBase& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetControlFrameBase& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>inet/linklayer/ethernet/common/EthernetControlFrame.msg:38</tt> by opp_msgtool.
 * <pre>
 * //
 * // This class represents an IEEE 802.3 Ethernet MAC Pause frame as defined in
 * // the section 31.4.1 MAC Control frame format of the IEEE Std 802.3-2018, IEEE
 * // Standard for Ethernet.
 * //
 * //  0                   1                   2                   3
 * //  0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
 * // +-------------------------------+-------------------------------+
 * // |             OpCode            |           PauseTime           |
 * // +-------------------------------+-------------------------------+
 * //
 * class EthernetPauseFrame extends EthernetControlFrameBase
 * {
 *     chunkLength = B(4); // B(2) + B(2)
 *     opCode = ETHERNET_CONTROL_PAUSE;
 *     int pauseTime; // in 512 bit-time units
 * }
 * </pre>
 */
class INET_API EthernetPauseFrame : public ::inet::EthernetControlFrameBase
{
  protected:
    int pauseTime = 0;

  private:
    void copy(const EthernetPauseFrame& other);

  protected:
    bool operator==(const EthernetPauseFrame&) = delete;

  public:
    EthernetPauseFrame();
    EthernetPauseFrame(const EthernetPauseFrame& other);
    virtual ~EthernetPauseFrame();
    EthernetPauseFrame& operator=(const EthernetPauseFrame& other);
    virtual EthernetPauseFrame *dup() const override {return new EthernetPauseFrame(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual int getPauseTime() const;
    virtual void setPauseTime(int pauseTime);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetPauseFrame& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetPauseFrame& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::EthernetControlFrameBase *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::EthernetControlFrameBase*>(ptr.get<cObject>()); }
template<> inline inet::EthernetPauseFrame *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::EthernetPauseFrame*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_ETHERNETCONTROLFRAME_M_H

