//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/ethernet/common/EthernetCommand.msg.
//

#ifndef __INET_ETHERNETCOMMAND_M_H
#define __INET_ETHERNETCOMMAND_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class EthernetBindCommand;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/Protocol_m.h" // import inet.common.Protocol

#include "inet/common/socket/SocketCommand_m.h" // import inet.common.socket.SocketCommand

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/ethernet/common/EthernetCommand.msg:16</tt> by opp_msgtool.
 * <pre>
 * class EthernetBindCommand extends SocketBindCommand
 * {
 *     MacAddress localAddress;
 *     MacAddress remoteAddress;
 *     const Protocol *protocol;
 * }
 * </pre>
 */
class INET_API EthernetBindCommand : public ::inet::SocketBindCommand
{
  protected:
    MacAddress localAddress;
    MacAddress remoteAddress;
    const Protocol * protocol = nullptr;

  private:
    void copy(const EthernetBindCommand& other);

  protected:
    bool operator==(const EthernetBindCommand&) = delete;

  public:
    EthernetBindCommand();
    EthernetBindCommand(const EthernetBindCommand& other);
    virtual ~EthernetBindCommand();
    EthernetBindCommand& operator=(const EthernetBindCommand& other);
    virtual EthernetBindCommand *dup() const override {return new EthernetBindCommand(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const MacAddress& getLocalAddress() const;
    virtual MacAddress& getLocalAddressForUpdate() { return const_cast<MacAddress&>(const_cast<EthernetBindCommand*>(this)->getLocalAddress());}
    virtual void setLocalAddress(const MacAddress& localAddress);

    virtual const MacAddress& getRemoteAddress() const;
    virtual MacAddress& getRemoteAddressForUpdate() { return const_cast<MacAddress&>(const_cast<EthernetBindCommand*>(this)->getRemoteAddress());}
    virtual void setRemoteAddress(const MacAddress& remoteAddress);

    virtual const Protocol * getProtocol() const;
    virtual void setProtocol(const Protocol * protocol);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const EthernetBindCommand& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, EthernetBindCommand& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::EthernetBindCommand *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::EthernetBindCommand*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_ETHERNETCOMMAND_M_H

