//
// Generated file, do not edit! Created by opp_msgtool 6.0 from inet/linklayer/ieee802154/Ieee802154MacHeader.msg.
//

#ifndef __INET_IEEE802154MACHEADER_M_H
#define __INET_IEEE802154MACHEADER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// opp_msgtool version check
#define MSGC_VERSION 0x0600
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgtool: 'make clean' should help.
#endif

// dll export symbol
#ifndef INET_API
#  if defined(INET_EXPORT)
#    define INET_API  OPP_DLLEXPORT
#  elif defined(INET_IMPORT)
#    define INET_API  OPP_DLLIMPORT
#  else
#    define INET_API
#  endif
#endif


namespace inet {

class Ieee802154MacHeader;

}  // namespace inet

#include "inet/common/INETDefs_m.h" // import inet.common.INETDefs

#include "inet/common/packet/chunk/Chunk_m.h" // import inet.common.packet.chunk.Chunk

#include "inet/linklayer/common/MacAddress_m.h" // import inet.linklayer.common.MacAddress


namespace inet {

/**
 * Class generated from <tt>inet/linklayer/ieee802154/Ieee802154MacHeader.msg:30</tt> by opp_msgtool.
 * <pre>
 * //
 * // A CSMA mac header format definition
 * //
 * // \@author Daniel Willkomm
 * //
 * class Ieee802154MacHeader extends FieldsChunk
 * {
 *     MacAddress srcAddr;
 *     MacAddress destAddr;
 *     int networkProtocol = -1;
 *     long sequenceId; // Sequence Number to detect duplicate messages
 * }
 * </pre>
 */
class INET_API Ieee802154MacHeader : public ::inet::FieldsChunk
{
  protected:
    MacAddress srcAddr;
    MacAddress destAddr;
    int networkProtocol = -1;
    long sequenceId = 0;

  private:
    void copy(const Ieee802154MacHeader& other);

  protected:
    bool operator==(const Ieee802154MacHeader&) = delete;

  public:
    Ieee802154MacHeader();
    Ieee802154MacHeader(const Ieee802154MacHeader& other);
    virtual ~Ieee802154MacHeader();
    Ieee802154MacHeader& operator=(const Ieee802154MacHeader& other);
    virtual Ieee802154MacHeader *dup() const override {return new Ieee802154MacHeader(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    virtual const MacAddress& getSrcAddr() const;
    virtual MacAddress& getSrcAddrForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<Ieee802154MacHeader*>(this)->getSrcAddr());}
    virtual void setSrcAddr(const MacAddress& srcAddr);

    virtual const MacAddress& getDestAddr() const;
    virtual MacAddress& getDestAddrForUpdate() { handleChange();return const_cast<MacAddress&>(const_cast<Ieee802154MacHeader*>(this)->getDestAddr());}
    virtual void setDestAddr(const MacAddress& destAddr);

    virtual int getNetworkProtocol() const;
    virtual void setNetworkProtocol(int networkProtocol);

    virtual long getSequenceId() const;
    virtual void setSequenceId(long sequenceId);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const Ieee802154MacHeader& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, Ieee802154MacHeader& obj) {obj.parsimUnpack(b);}


}  // namespace inet


namespace omnetpp {

template<> inline inet::Ieee802154MacHeader *fromAnyPtr(any_ptr ptr) { return check_and_cast<inet::Ieee802154MacHeader*>(ptr.get<cObject>()); }

}  // namespace omnetpp

#endif // ifndef __INET_IEEE802154MACHEADER_M_H

