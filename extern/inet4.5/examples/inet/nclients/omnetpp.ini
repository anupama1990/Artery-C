#
# This ini file runs Telnet sessions on the NClients network, using
# TelnetApp+TcpGenericServerApp.
#
# See also fileTransfer.ini and basicHTTP.ini for different kinds of
# network traffic.
#

[Config inet__inet]
description = "inet_TCP <---> inet_TCP"
# setting TCP stack implementation
**.srv*.tcp.typename = "Tcp"
**.cli*.tcp.typename = "Tcp"
#**.srv.numPcapRecorders = 1
#**.srv.pcapRecorder[0].pcapFile = "results/inet_srv.pcap"

[Config lwip__lwip]
description = "TcpLwip <---> TcpLwip"
#expected-result = "ERROR"
# setting TCP stack implementation
**.srv*.tcp.typename = "TcpLwip"
**.cli*.tcp.typename = "TcpLwip"
#**.srv.numPcapRecorders = 1
#**.srv.pcapRecorder[0].pcapFile = "results/lwip_srv.pcap"

[Config lwip__inet]
description = "TcpLwip <---> inet_TCP"
#expected-result = "ERROR"
# setting TCP stack implementation
**.srv*.tcp.typename = "TcpLwip"
**.cli*.tcp.typename = "Tcp"

[Config inet__lwip]
description = "inet_TCP <---> TcpLwip"
#expected-result = "ERROR"
# setting TCP stack implementation
**.srv*.tcp.typename = "Tcp"
**.cli*.tcp.typename = "TcpLwip"

[General]
network = NClients
#abstract-config = true (requires omnet 7)

sim-time-limit = 3000s

# number of client computers
*.n = 4

# tcp apps
**.cli[*].numApps = 1
**.cli[*].app[*].typename = "TelnetApp"
**.cli[*].app[0].localAddress = ""
**.cli[*].app[0].localPort = -1
**.cli[*].app[0].connectAddress = "srv"
**.cli[*].app[0].connectPort = 1000

**.cli[*].app[0].startTime = exponential(5s)
**.cli[*].app[0].numCommands = int(exponential(10))
**.cli[*].app[0].commandLength = intWithUnit(exponential(10B))
**.cli[*].app[0].keyPressDelay = exponential(0.1s)
**.cli[*].app[0].commandOutputLength = intWithUnit(exponential(40B))
**.cli[*].app[0].thinkTime = truncnormal(2s,3s)
**.cli[*].app[0].idleInterval = truncnormal(3600s,1200s)
**.cli[*].app[0].reconnectInterval = 30s

**.srv.numApps = 1
**.srv.app[*].typename = "TcpGenericServerApp"
**.srv.app[0].localAddress = ""
**.srv.app[0].localPort = 1000
**.srv.app[0].replyDelay = 0s

# NIC configuration
**.ppp[*].queue.typename = "DropTailQueue" # in routers
**.ppp[*].queue.packetCapacity = 10    # in routers

# turn on throughput stat
**.channel.throughput.result-recording-modes=+last
