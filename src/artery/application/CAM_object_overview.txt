// CaService line 210  
/// createCooperativeAwarenessMessage
// vanetza::asn1::Cam message;
vanetza/asn1/CAM.h : public vanetza/asn1/asn1c_wrapper.hpp type vanetza/asn1/its/CAM.h
{
    ItsPduHeader_t header 
    {
        long          protocolVersion;
        long          messageID;
        unsigned long stationID;
        /* Context for parsing across buffer boundaries */
        asn_struct_ctx_t _asn_ctx;
    }
    CoopAwareness_t cam
    {
        long              generationDeltaTime;
        CamParameters_t   camParameters
        {
            BasicContainer_t  basicContainer
            {
                long stationType;
                ReferencePosition_t	 referencePosition
                {
                    long latitude;
                    long longitude;
                    PosConfidenceEllipse_t positionConfidenceEllipse
                    {
                        long semiMajorConfidence;
                        long semiMinorConfidence;
                        long semiMajorOrientation; // heading
                        /* Context for parsing across buffer boundaries */
                        asn_struct_ctx_t _asn_ctx;
                    }
                    Altitude_t	 altitude
                    {
                        long altitudeValue;
                        long altitudeConfidence;
                        /* Context for parsing across buffer boundaries */
                        asn_struct_ctx_t _asn_ctx;
                    }
                    
                    /* Context for parsing across buffer boundaries */
                    asn_struct_ctx_t _asn_ctx;
                }
                /* Context for parsing across buffer boundaries */
                asn_struct_ctx_t _asn_ctx;
            }
            HighFrequencyContainer_t highFrequencyContainer
            {
                enum HighFrequencyContainer_PR present;
                union HighFrequencyContainer_u choice
                {
                    BasicVehicleContainerHighFrequency_t basicVehicleContainerHighFrequency
                    {
                        Heading_t heading
                        {
                            long headingValue;
                            long headingConfidence;
                            asn_struct_ctx_t _asn_ctx;
                        }
                        Speed_t speed
                        {
                            long speedValue;
                            long speedConfidence;
                            asn_struct_ctx_t _asn_ctx;
                        }
                        long driveDirection;
                        VehicleLength_t vehicleLength
                        {
                            long vehicleLengthValue;
                            long vehicleLengthConfidenceIndication;
                            asn_struct_ctx_t _asn_ctx;
                        }
                        long vehicleWidth;
                        LongitudinalAcceleration_t longitudinalAcceleration 
                        {
                            long longitudinalAccelerationValue;
                            long longitudinalAccelerationConfidence;
                            asn_struct_ctx_t _asn_ctx;
                        }  
                        Curvature_t curvature
                        {
                            long curvatureValue;
                            long curvatureConfidence;
                            asn_struct_ctx_t _asn_ctx;
                        }
                        long curvatureCalculationMode;
                        YawRate_t yawRate
                        {
                            long yawRateValue;
                            long	 yawRateConfidence;
                            asn_struct_ctx_t _asn_ctx;
                        }
                        BIT_STRING_t *accelerationControl;	/* OPTIONAL */
                        long *lanePosition;	/* OPTIONAL */
                        SteeringWheelAngle *steeringWheelAngle	/* OPTIONAL */
                        {
                            long steeringWheelAngleValue;
                            long steeringWheelAngleConfidence;
                            asn_struct_ctx_t _asn_ctx;
                        }
                        LateralAcceleration *lateralAcceleration;	/* OPTIONAL */
                        {
                            long lateralAccelerationValue;
                            long lateralAccelerationConfidence;
                            asn_struct_ctx_t _asn_ctx;
                        }
                        VerticalAcceleration *verticalAcceleration;	/* OPTIONAL */
                        {
                            long verticalAccelerationValue;
                            long verticalAccelerationConfidence;
                            asn_struct_ctx_t _asn_ctx;
                        }
                        long *performanceClass;	/* OPTIONAL */
                        CenDsrcTollingZone *cenDsrcTollingZone;	/* OPTIONAL */
                        {
                            long protectedZoneLatitude;
                            long protectedZoneLongitude;
                            long *cenDsrcTollingZoneID;	/* OPTIONAL */
                            asn_struct_ctx_t _asn_ctx;
                        }
                        /* Context for parsing across buffer boundaries */
                        asn_struct_ctx_t _asn_ctx;
                    }
                    RSUContainerHighFrequency_t	 rsuContainerHighFrequency;  //omitted
                }
            }
            LowFrequencyContainer *lowFrequencyContainer;	/* OPTIONAL */
            {
                enum LowFrequencyContainer_PR present;
                union LowFrequencyContainer_u choice
                {
                    BasicVehicleContainerLowFrequency_t	 basicVehicleContainerLowFrequency
                    {
                        long vehicleRole;
                        BIT_STRING_t	 exteriorLights;
                        PathHistory_t	 pathHistory
                        {
                            A_SEQUENCE_OF(struct PathPoint) list;
                            asn_struct_ctx_t _asn_ctx;
                        }
                        asn_struct_ctx_t _asn_ctx;
                    }
                }
            }
            SpecialVehicleContainer *specialVehicleContainer;	/* OPTIONAL */
            {
                enum SpecialVehicleContainer_PR present;
                union SpecialVehicleContainer_u choice
                {
                    PublicTransportContainer_t	 publicTransportContainer;
                    SpecialTransportContainer_t	 specialTransportContainer;
                    DangerousGoodsContainer_t	 dangerousGoodsContainer;
                    RoadWorksContainerBasic_t	 roadWorksContainerBasic;
                    RescueContainer_t	 rescueContainer;
                    EmergencyContainer_t	 emergencyContainer;
                    SafetyCarContainer_t	 safetyCarContainer;
                }
                asn_struct_ctx_t _asn_ctx;
            }
            /* Context for parsing across buffer boundaries */
            asn_struct_ctx_t _asn_ctx;
        }
        /* Context for parsing across buffer boundaries */
        asn_struct_ctx_t _asn_ctx;
    }
    /* Context for parsing across buffer boundaries */
    asn_struct_ctx_t _asn_ctx
    {
        short phase;		/* Decoding phase */
        short step;		/* Elementary step of a phase */
        int context;		/* Other context information */
        void *ptr;		/* Decoder-specific stuff (stack elements) */
        ber_tlv_len_t left;	/* Number of bytes left, -1 for indefinite */
    }
}


// sendCam 

geonet::DownPAcket: public ChunkPacket // hashmap of layers
CamByteBuffer asn1c_conversion from buffer to asn1_wrapper(CAM_t)

router adds to transportlayer
network layer
accessinterface creates geonetworkpacket


    
